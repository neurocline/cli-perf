command add "add"
    usage
        "usage: git add [<options>] [--] <pathspec>..."
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option
        groupline
    option interactive
        shortname: i
        longname: interactive
        type: bool
        help: "interactive picking"
    option patch
        shortname: p
        longname: patch
        type: bool
        help: "select hunks interactively"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "edit current diff and apply"
    option force
        shortname: f
        longname: force
        type: bool
        help: "allow adding otherwise ignored files"
    option update
        shortname: u
        longname: update
        type: bool
        help: "update tracked files"
    option renormalize
        longname: renormalize
        type: bool
        help: "renormalize EOL of tracked files (implies -u)"
    option intentToAdd
        shortname: N
        longname: intent-to-add
        type: bool
        help: "record only the fact that the path will be added later"
    option all
        shortname: A
        longname: all
        type: bool
        help: "add changes from all tracked and untracked files"
    option ignoreRemoval
        longname: ignore-removal
        type: bool
        help: "ignore paths removed in the working tree (same as --no-all)"
    option refresh
        longname: refresh
        type: bool
        help: "don't add, only refresh the index"
    option ignoreErrors
        longname: ignore-errors
        type: bool
        help: "just skip files which cannot be added because of errors"
    option ignoreMissing
        longname: ignore-missing
        type: bool
        help: "check if - even missing - files are ignored in dry run"
    option chmod
        longname: chmod
        argument: (+|-)x
        type: string
        help: "override the executable bit of the listed files"
    option warnEmbeddedRepo
        longname: warn-embedded-repo
        hidden
        type: bool
        help: "warn when adding an embedded repository"
command am "am"
    usage
        "usage: git am [<options>] [(<mbox> | <Maildir>)...]"
        "   or: git am [<options>] (--continue | --skip | --abort)"
    option interactive
        shortname: i
        longname: interactive
        type: bool
        help: "run interactively"
    option binary
        shortname: b
        longname: binary
        hidden
        type: bool
        help: "historical option -- no-op"
    option 3way
        shortname: 3
        longname: 3way
        type: bool
        help: "allow fall back on 3way merging if needed"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be quiet"
    option signoff
        shortname: s
        longname: signoff
        type: bool
        help: "add a Signed-off-by line to the commit message"
    option utf8
        shortname: u
        longname: utf8
        type: bool
        help: "recode into utf8 (default)"
    option keep
        shortname: k
        longname: keep
        type: bool
        help: "pass -k flag to git-mailinfo"
    option keepNonPatch
        longname: keep-non-patch
        type: bool
        help: "pass -b flag to git-mailinfo"
    option messageId
        shortname: m
        longname: message-id
        type: bool
        help: "pass -m flag to git-mailinfo"
    option keepCr
        longname: keep-cr
        type: bool
        help: "pass --keep-cr flag to git-mailsplit for mbox format"
    option noKeepCr
        longname: no-keep-cr
        type: bool
        help: "do not pass --keep-cr flag to git-mailsplit independent of am.keepcr"
    option scissors
        shortname: c
        longname: scissors
        type: bool
        help: "strip everything before a scissors line"
    option whitespace
        longname: whitespace
        argument: <action>
        type: string
        help: "pass it through git-apply"
    option ignoreSpaceChange
        longname: ignore-space-change
        type: bool
        help: "pass it through git-apply"
    option ignoreWhitespace
        longname: ignore-whitespace
        type: bool
        help: "pass it through git-apply"
    option directory
        longname: directory
        argument: <root>
        type: string
        help: "pass it through git-apply"
    option exclude
        longname: exclude
        argument: <path>
        type: string
        help: "pass it through git-apply"
    option include
        longname: include
        argument: <path>
        type: string
        help: "pass it through git-apply"
    option c
        shortname: C
        argument: <n>
        type: int
        help: "pass it through git-apply"
    option p
        shortname: p
        argument: <num>
        type: int
        help: "pass it through git-apply"
    option patchFormat
        longname: patch-format
        argument: <format>
        type: string
        help: "format the patch(es) are in"
    option reject
        longname: reject
        type: bool
        help: "pass it through git-apply"
    option resolvemsg
        longname: resolvemsg
        argument: ...
        type: string
        help: "override error message when patch failure occurs"
    option continue
        longname: continue
        type: bool
        help: "continue applying patches after resolving a conflict"
    option resolved
        shortname: r
        longname: resolved
        type: bool
        help: "synonyms for --continue"
    option skip
        longname: skip
        type: bool
        help: "skip the current patch"
    option abort
        longname: abort
        type: bool
        help: "restore the original branch and abort the patching operation."
    option quit
        longname: quit
        type: bool
        help: "abort the patching operation but keep HEAD where it is."
    option showCurrentPatch
        longname: show-current-patch
        type: bool
        help: "show the patch being applied."
    option committerDateIsAuthorDate
        longname: committer-date-is-author-date
        type: bool
        help: "lie about committer date"
    option ignoreDate
        longname: ignore-date
        type: bool
        help: "use current timestamp for author date"
    option rerereAutoupdate
        longname: rerere-autoupdate
        type: bool
        help: "update the index with reused conflict resolution if possible"
    option gpgSign
        shortname: S
        longname: gpg-sign
        argument: [=<key-id>]
        optional
        type: string
        help: "GPG-sign commits"
    option rebasing
        longname: rebasing
        hidden
        type: bool
        help: "(internal use for git-rebase)"
command annotate "annotate"
    usage
        "usage: git blame [<options>] [<rev-opts>] [<rev>] [--] <file>"
        ""
        "    <rev-opts> are documented in git-rev-list(1)"
    option incremental
        longname: incremental
        type: bool
        help: "Show blame entries as we find them, incrementally"
    option b
        shortname: b
        type: bool
        help: "Show blank SHA-1 for boundary commits (Default: off)"
    option root
        longname: root
        type: bool
        help: "Do not treat root commits as boundaries (Default: off)"
    option showStats
        longname: show-stats
        type: bool
        help: "Show work cost statistics"
    option progress
        longname: progress
        type: bool
        help: "Force progress reporting"
    option scoreDebug
        longname: score-debug
        type: bool
        help: "Show output score for blame entries"
    option showName
        shortname: f
        longname: show-name
        type: bool
        help: "Show original filename (Default: auto)"
    option showNumber
        shortname: n
        longname: show-number
        type: bool
        help: "Show original linenumber (Default: off)"
    option porcelain
        shortname: p
        longname: porcelain
        type: bool
        help: "Show in a format designed for machine consumption"
    option linePorcelain
        longname: line-porcelain
        type: bool
        help: "Show porcelain format with per-line commit information"
    option c
        shortname: c
        type: bool
        help: "Use the same output mode as git-annotate (Default: off)"
    option t
        shortname: t
        type: bool
        help: "Show raw timestamp (Default: off)"
    option l
        shortname: l
        type: bool
        help: "Show long commit SHA1 (Default: off)"
    option s
        shortname: s
        type: bool
        help: "Suppress author name and timestamp (Default: off)"
    option showEmail
        shortname: e
        longname: show-email
        type: bool
        help: "Show author email instead of name (Default: off)"
    option w
        shortname: w
        type: bool
        help: "Ignore whitespace differences"
    option colorLines
        longname: color-lines
        type: bool
        help: "color redundant metadata from previous line differently"
    option colorByAge
        longname: color-by-age
        type: bool
        help: "color lines by age"
    option indentHeuristic
        longname: indent-heuristic
        type: bool
        help: "Use an experimental heuristic to improve diffs"
    option minimal
        longname: minimal
        type: bool
        help: "Spend extra cycles to find better match"
    option s
        shortname: S
        argument: <file>
        type: string
        help: "Use revisions from <file> instead of calling git-rev-list"
    option contents
        longname: contents
        argument: <file>
        type: string
        help: "Use <file>'s contents as the final image"
    option c
        shortname: C
        argument: [<score>]
        optional
        type: string
        help: "Find line copies within and across files"
    option m
        shortname: M
        argument: [<score>]
        optional
        type: string
        help: "Find line movements within and across files"
    option l
        shortname: L
        argument: <n,m>
        type: string
        help: "Process only line range n,m, counting from 1"
    option abbrev
        longname: abbrev
        argument: [=<n>]
        optional
        type: int
        help: "use <n> digits to display SHA-1s"
command apply "apply"
    usage
        "usage: git apply [<options>] [<patch>...]"
    option exclude
        longname: exclude
        argument: <path>
        type: string
        help: "don't apply changes matching the given path"
    option include
        longname: include
        argument: <path>
        type: string
        help: "apply changes matching the given path"
    option p
        shortname: p
        argument: <num>
        type: int
        help: "remove <num> leading slashes from traditional diff paths"
    option noAdd
        longname: no-add
        type: bool
        help: "ignore additions made by the patch"
    option stat
        longname: stat
        type: bool
        help: "instead of applying the patch, output diffstat for the input"
    option allowBinaryReplacement
        longname: allow-binary-replacement
        hidden
        type: bool
        help: "no-op (backward compatibility)"
    option binary
        longname: binary
        hidden
        type: bool
        help: "no-op (backward compatibility)"
    option numstat
        longname: numstat
        type: bool
        help: "show number of added and deleted lines in decimal notation"
    option summary
        longname: summary
        type: bool
        help: "instead of applying the patch, output a summary for the input"
    option check
        longname: check
        type: bool
        help: "instead of applying the patch, see if the patch is applicable"
    option index
        longname: index
        type: bool
        help: "make sure the patch is applicable to the current index"
    option intentToAdd
        shortname: N
        longname: intent-to-add
        type: bool
        help: "mark new files with `git add --intent-to-add`"
    option cached
        longname: cached
        type: bool
        help: "apply a patch without touching the working tree"
    option unsafePaths
        longname: unsafe-paths
        type: bool
        help: "accept a patch that touches outside the working area"
    option apply
        longname: apply
        type: bool
        help: "also apply the patch (use with --stat/--summary/--check)"
    option 3way
        shortname: 3
        longname: 3way
        type: bool
        help: "attempt three-way merge if a patch does not apply"
    option buildFakeAncestor
        longname: build-fake-ancestor
        argument: <file>
        type: string
        help: "build a temporary index based on embedded index information"
    option z
        shortname: z
        type: bool
        help: "paths are separated with NUL character"
    option c
        shortname: C
        argument: <n>
        type: int
        help: "ensure at least <n> lines of context match"
    option whitespace
        longname: whitespace
        argument: <action>
        type: string
        help: "detect new or modified lines that have whitespace errors"
    option ignoreSpaceChange
        longname: ignore-space-change
        type: bool
        help: "ignore changes in whitespace when finding context"
    option ignoreWhitespace
        longname: ignore-whitespace
        type: bool
        help: "ignore changes in whitespace when finding context"
    option reverse
        shortname: R
        longname: reverse
        type: bool
        help: "apply the patch in reverse"
    option unidiffZero
        longname: unidiff-zero
        type: bool
        help: "don't expect at least one line of context"
    option reject
        longname: reject
        type: bool
        help: "leave the rejected hunks in corresponding *.rej files"
    option allowOverlap
        longname: allow-overlap
        type: bool
        help: "allow overlapping hunks"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option inaccurateEof
        longname: inaccurate-eof
        type: bool
        help: "tolerate incorrectly detected missing new-line at the end of file"
    option recount
        longname: recount
        type: bool
        help: "do not trust the line counts in the hunk headers"
    option directory
        longname: directory
        argument: <root>
        type: string
        help: "prepend <root> to all filenames"
command archive "archive"
    usage
        "usage: git archive [<options>] <tree-ish> [<path>...]"
        "   or: git archive --list"
        "   or: git archive --remote <repo> [--exec <cmd>] [<options>] <tree-ish> [<path>...]"
        "   or: git archive --remote <repo> [--exec <cmd>] --list"
    option format
        longname: format
        argument: <fmt>
        type: string
        help: "archive format"
    option prefix
        longname: prefix
        argument: <prefix>
        type: string
        help: "prepend prefix to each pathname in the archive"
    option output
        shortname: o
        longname: output
        argument: <file>
        type: string
        help: "write the archive to this file"
    option worktreeAttributes
        longname: worktree-attributes
        type: bool
        help: "read .gitattributes in working directory"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "report archived files on stderr"
    option 0
        shortname: 0
        type: bool
        help: "store only"
    option 1
        shortname: 1
        type: bool
        help: "compress faster"
    option 2
        shortname: 2
        hidden
        type: bool
    option 3
        shortname: 3
        hidden
        type: bool
    option 4
        shortname: 4
        hidden
        type: bool
    option 5
        shortname: 5
        hidden
        type: bool
    option 6
        shortname: 6
        hidden
        type: bool
    option 7
        shortname: 7
        hidden
        type: bool
    option 8
        shortname: 8
        hidden
        type: bool
    option 9
        shortname: 9
        type: bool
        help: "compress better"
    option
        groupline
    option list
        shortname: l
        longname: list
        type: bool
        help: "list supported archive formats"
    option
        groupline
    option remote
        longname: remote
        argument: <repo>
        type: string
        help: "retrieve the archive from remote repository <repo>"
    option exec
        longname: exec
        argument: <command>
        type: string
        help: "path to the remote git-upload-archive command"
command bisect "bisect"
    usage
        "usage: git bisect [help|start|bad|good|new|old|terms|skip|next|reset|visualize|view|replay|log|run]"
        ""
        "git bisect help"
        "	print this long help message."
        "git bisect start [--term-{old,good}=<term> --term-{new,bad}=<term>]"
        "		 [--no-checkout] [<bad> [<good>...]] [--] [<pathspec>...]"
        "	reset bisect state and start bisection."
        "git bisect (bad|new) [<rev>]"
        "	mark <rev> a known-bad revision/"
        "		a revision after change in a given property."
        "git bisect (good|old) [<rev>...]"
        "	mark <rev>... known-good revisions/"
        "		revisions before change in a given property."
        "git bisect terms [--term-good | --term-bad]"
        "	show the terms used for old and new commits (default: bad, good)"
        "git bisect skip [(<rev>|<range>)...]"
        "	mark <rev>... untestable revisions."
        "git bisect next"
        "	find next bisection to test and check it out."
        "git bisect reset [<commit>]"
        "	finish bisection search and go back to commit."
        "git bisect (visualize|view)"
        "	show bisect status in gitk."
        "git bisect replay <logfile>"
        "	replay bisection log."
        "git bisect log"
        "	show bisect log."
        "git bisect run <cmd>..."
        "	use <cmd>... to automatically bisect."
        ""
        "Please use "git help bisect" to get the full man page."
command blame "blame"
    usage
        "usage: git blame [<options>] [<rev-opts>] [<rev>] [--] <file>"
        ""
        "    <rev-opts> are documented in git-rev-list(1)"
    option incremental
        longname: incremental
        type: bool
        help: "Show blame entries as we find them, incrementally"
    option b
        shortname: b
        type: bool
        help: "Show blank SHA-1 for boundary commits (Default: off)"
    option root
        longname: root
        type: bool
        help: "Do not treat root commits as boundaries (Default: off)"
    option showStats
        longname: show-stats
        type: bool
        help: "Show work cost statistics"
    option progress
        longname: progress
        type: bool
        help: "Force progress reporting"
    option scoreDebug
        longname: score-debug
        type: bool
        help: "Show output score for blame entries"
    option showName
        shortname: f
        longname: show-name
        type: bool
        help: "Show original filename (Default: auto)"
    option showNumber
        shortname: n
        longname: show-number
        type: bool
        help: "Show original linenumber (Default: off)"
    option porcelain
        shortname: p
        longname: porcelain
        type: bool
        help: "Show in a format designed for machine consumption"
    option linePorcelain
        longname: line-porcelain
        type: bool
        help: "Show porcelain format with per-line commit information"
    option c
        shortname: c
        type: bool
        help: "Use the same output mode as git-annotate (Default: off)"
    option t
        shortname: t
        type: bool
        help: "Show raw timestamp (Default: off)"
    option l
        shortname: l
        type: bool
        help: "Show long commit SHA1 (Default: off)"
    option s
        shortname: s
        type: bool
        help: "Suppress author name and timestamp (Default: off)"
    option showEmail
        shortname: e
        longname: show-email
        type: bool
        help: "Show author email instead of name (Default: off)"
    option w
        shortname: w
        type: bool
        help: "Ignore whitespace differences"
    option colorLines
        longname: color-lines
        type: bool
        help: "color redundant metadata from previous line differently"
    option colorByAge
        longname: color-by-age
        type: bool
        help: "color lines by age"
    option indentHeuristic
        longname: indent-heuristic
        type: bool
        help: "Use an experimental heuristic to improve diffs"
    option minimal
        longname: minimal
        type: bool
        help: "Spend extra cycles to find better match"
    option s
        shortname: S
        argument: <file>
        type: string
        help: "Use revisions from <file> instead of calling git-rev-list"
    option contents
        longname: contents
        argument: <file>
        type: string
        help: "Use <file>'s contents as the final image"
    option c
        shortname: C
        argument: [<score>]
        optional
        type: string
        help: "Find line copies within and across files"
    option m
        shortname: M
        argument: [<score>]
        optional
        type: string
        help: "Find line movements within and across files"
    option l
        shortname: L
        argument: <n,m>
        type: string
        help: "Process only line range n,m, counting from 1"
    option abbrev
        longname: abbrev
        argument: [=<n>]
        optional
        type: int
        help: "use <n> digits to display SHA-1s"
command branch "branch"
    usage
        "usage: git branch [<options>] [-r | -a] [--merged | --no-merged]"
        "   or: git branch [<options>] [-l] [-f] <branch-name> [<start-point>]"
        "   or: git branch [<options>] [-r] (-d | -D) <branch-name>..."
        "   or: git branch [<options>] (-m | -M) [<old-branch>] <new-branch>"
        "   or: git branch [<options>] (-c | -C) [<old-branch>] <new-branch>"
        "   or: git branch [<options>] [-r | -a] [--points-at]"
        "   or: git branch [<options>] [-r | -a] [--format]"
    option
        textline: Generic options
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "show hash and subject, give twice for upstream branch"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress informational messages"
    option track
        shortname: t
        longname: track
        type: bool
        help: "set up tracking mode (see git-pull(1))"
    option setUpstream
        longname: set-upstream
        hidden
        type: bool
        help: "do not use"
    option setUpstreamTo
        shortname: u
        longname: set-upstream-to
        argument: <upstream>
        type: string
        help: "change the upstream info"
    option unsetUpstream
        longname: unset-upstream
        type: bool
        help: "Unset the upstream info"
    option color
        longname: color
        argument: [=<when>]
        optional
        type: string
        help: "use colored output"
    option remotes
        shortname: r
        longname: remotes
        type: bool
        help: "act on remote-tracking branches"
    option contains
        longname: contains
        argument: <commit>
        type: string
        help: "print only branches that contain the commit"
    option noContains
        longname: no-contains
        argument: <commit>
        type: string
        help: "print only branches that don't contain the commit"
    option with
        longname: with
        hidden
        argument: <commit>
        type: string
        help: "print only branches that contain the commit"
    option without
        longname: without
        hidden
        argument: <commit>
        type: string
        help: "print only branches that don't contain the commit"
    option abbrev
        longname: abbrev
        argument: [=<n>]
        optional
        type: int
        help: "use <n> digits to display SHA-1s"
    option
        groupline
    option
        textline: Specific git-branch actions:
    option all
        shortname: a
        longname: all
        type: bool
        help: "list both remote-tracking and local branches"
    option delete
        shortname: d
        longname: delete
        type: bool
        help: "delete fully merged branch"
    option d
        shortname: D
        type: bool
        help: "delete branch (even if not merged)"
    option move
        shortname: m
        longname: move
        type: bool
        help: "move/rename a branch and its reflog"
    option m
        shortname: M
        type: bool
        help: "move/rename a branch, even if target exists"
    option copy
        shortname: c
        longname: copy
        type: bool
        help: "copy a branch and its reflog"
    option c
        shortname: C
        type: bool
        help: "copy a branch, even if target exists"
    option list
        shortname: l
        longname: list
        type: bool
        help: "list branch names"
    option createReflog
        longname: create-reflog
        type: bool
        help: "create the branch's reflog"
    option editDescription
        longname: edit-description
        type: bool
        help: "edit the description for the branch"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force creation, move/rename, deletion"
    option merged
        longname: merged
        argument: <commit>
        type: string
        help: "print only branches that are merged"
    option noMerged
        longname: no-merged
        argument: <commit>
        type: string
        help: "print only branches that are not merged"
    option column
        longname: column
        argument: [=<style>]
        optional
        type: string
        help: "list branches in columns"
    option sort
        longname: sort
        argument: <key>
        type: string
        help: "field name to sort on"
    option pointsAt
        longname: points-at
        argument: <object>
        type: string
        help: "print only branches of the object"
    option ignoreCase
        shortname: i
        longname: ignore-case
        type: bool
        help: "sorting and filtering are case insensitive"
    option format
        longname: format
        argument: <format>
        type: string
        help: "format to use for the output"
command bundle "bundle"
    usage
        "usage: git bundle create <file> <git-rev-list args>"
        "   or: git bundle verify <file>"
        "   or: git bundle list-heads <file> [<refname>...]"
        "   or: git bundle unbundle <file> [<refname>...]"
command catFile "cat-file"
    usage
        "usage: git cat-file (-t [--allow-unknown-type] | -s [--allow-unknown-type] | -e | -p | <type> | --textconv | --filters) [--path=<path>] <object>"
        "   or: git cat-file (--batch | --batch-check) [--follow-symlinks] [--textconv | --filters]"
    option
        textline: <type> can be one of: blob, tree, commit, tag
    option t
        shortname: t
        type: bool
        help: "show object type"
    option s
        shortname: s
        type: bool
        help: "show object size"
    option e
        shortname: e
        type: bool
        help: "exit with zero when there's no error"
    option p
        shortname: p
        type: bool
        help: "pretty-print object's content"
    option textconv
        longname: textconv
        type: bool
        help: "for blob objects, run textconv on object's content"
    option filters
        longname: filters
        type: bool
        help: "for blob objects, run filters on object's content"
    option path
        longname: path
        argument: <blob>
        type: string
        help: "use a specific path for --textconv/--filters"
    option allowUnknownType
        longname: allow-unknown-type
        type: bool
        help: "allow -s and -t to work with broken/corrupt objects"
    option buffer
        longname: buffer
        type: bool
        help: "buffer --batch output"
    option batch
        longname: batch
        argument: [=<format>]
        optional
        type: string
        help: "show info and content of objects fed from the standard input"
    option batchCheck
        longname: batch-check
        argument: [=<format>]
        optional
        type: string
        help: "show info about objects fed from the standard input"
    option followSymlinks
        longname: follow-symlinks
        type: bool
        help: "follow in-tree symlinks (used with --batch or --batch-check)"
    option batchAllObjects
        longname: batch-all-objects
        type: bool
        help: "show all objects with --batch or --batch-check"
    option unordered
        longname: unordered
        type: bool
        help: "do not order --batch-all-objects output"
command checkAttr "check-attr"
    usage
        "usage: git check-attr [-a | --all | <attr>...] [--] <pathname>..."
        "   or: git check-attr --stdin [-z] [-a | --all | <attr>...]"
    option all
        shortname: a
        longname: all
        type: bool
        help: "report all attributes set on file"
    option cached
        longname: cached
        type: bool
        help: "use .gitattributes only from the index"
    option stdin
        longname: stdin
        type: bool
        help: "read file names from stdin"
    option z
        shortname: z
        type: bool
        help: "terminate input and output records by a NUL character"
command checkIgnore "check-ignore"
    usage
        "usage: git check-ignore [<options>] <pathname>..."
        "   or: git check-ignore [<options>] --stdin"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress progress reporting"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option
        groupline
    option stdin
        longname: stdin
        type: bool
        help: "read file names from stdin"
    option z
        shortname: z
        type: bool
        help: "terminate input and output records by a NUL character"
    option nonMatching
        shortname: n
        longname: non-matching
        type: bool
        help: "show non-matching input paths"
    option noIndex
        longname: no-index
        type: bool
        help: "ignore index when checking"
command checkMailmap "check-mailmap"
    usage
        "usage: git check-mailmap [<options>] <contact>..."
    option stdin
        longname: stdin
        type: bool
        help: "also read contacts from stdin"
command checkout "checkout"
    usage
        "usage: git checkout [<options>] <branch>"
        "   or: git checkout [<options>] [<branch>] -- <file>..."
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress progress reporting"
    option b
        shortname: b
        argument: <branch>
        type: string
        help: "create and checkout a new branch"
    option b
        shortname: B
        argument: <branch>
        type: string
        help: "create/reset and checkout a branch"
    option l
        shortname: l
        type: bool
        help: "create reflog for new branch"
    option detach
        longname: detach
        type: bool
        help: "detach HEAD at named commit"
    option track
        shortname: t
        longname: track
        type: bool
        help: "set upstream info for new branch"
    option orphan
        longname: orphan
        argument: <new-branch>
        type: string
        help: "new unparented branch"
    option ours
        shortname: 2
        longname: ours
        type: bool
        help: "checkout our version for unmerged files"
    option theirs
        shortname: 3
        longname: theirs
        type: bool
        help: "checkout their version for unmerged files"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force checkout (throw away local modifications)"
    option merge
        shortname: m
        longname: merge
        type: bool
        help: "perform a 3-way merge with the new branch"
    option overwriteIgnore
        longname: overwrite-ignore
        type: bool
        help: "update ignored files (default)"
    option conflict
        longname: conflict
        argument: <style>
        type: string
        help: "conflict style (merge or diff3)"
    option patch
        shortname: p
        longname: patch
        type: bool
        help: "select hunks interactively"
    option ignoreSkipWorktreeBits
        longname: ignore-skip-worktree-bits
        type: bool
        help: "do not limit pathspecs to sparse entries only"
    option guess
        longname: guess
        hidden
        type: bool
        help: "second guess 'git checkout <no-such-branch>'"
    option ignoreOtherWorktrees
        longname: ignore-other-worktrees
        type: bool
        help: "do not check if another worktree is holding the given ref"
    option recurseSubmodules
        longname: recurse-submodules
        argument: [=<checkout>]
        optional
        type: string
        help: "control recursive updating of submodules"
    option progress
        longname: progress
        type: bool
        help: "force progress reporting"
command checkoutIndex "checkout-index"
    usage
        "usage: git checkout-index [<options>] [--] [<file>...]"
    option all
        shortname: a
        longname: all
        type: bool
        help: "check out all files in the index"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force overwrite of existing files"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "no warning for existing files and files not in index"
    option noCreate
        shortname: n
        longname: no-create
        type: bool
        help: "don't checkout new files"
    option index
        shortname: u
        longname: index
        type: bool
        help: "update stat information in the index file"
    option z
        shortname: z
        type: bool
        help: "paths are separated with NUL character"
    option stdin
        longname: stdin
        type: bool
        help: "read list of paths from the standard input"
    option temp
        longname: temp
        type: bool
        help: "write the content to temporary files"
    option prefix
        longname: prefix
        argument: <string>
        type: string
        help: "when creating files, prepend <string>"
    option stage
        longname: stage
        argument: (1|2|3|all)
        type: string
        help: "copy out the files from named stage"
command checkRefFormat "check-ref-format"
    usage
        "usage: git check-ref-format [--normalize] [<options>] <refname>"
        "   or: git check-ref-format --branch <branchname-shorthand>"
command cherry "cherry"
    usage
        "usage: git cherry [-v] [<upstream> [<head> [<limit>]]]"
    option abbrev
        longname: abbrev
        argument: [=<n>]
        optional
        type: int
        help: "use <n> digits to display SHA-1s"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
command cherryPick "cherry-pick"
    usage
        "usage: git cherry-pick [<options>] <commit-ish>..."
        "   or: git cherry-pick <subcommand>"
    option quit
        longname: quit
        type: bool
        help: "end revert or cherry-pick sequence"
    option continue
        longname: continue
        type: bool
        help: "resume revert or cherry-pick sequence"
    option abort
        longname: abort
        type: bool
        help: "cancel revert or cherry-pick sequence"
    option noCommit
        shortname: n
        longname: no-commit
        type: bool
        help: "don't automatically commit"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "edit the commit message"
    option r
        shortname: r
        hidden
        type: bool
        help: "no-op (backward compatibility)"
    option signoff
        shortname: s
        longname: signoff
        type: bool
        help: "add Signed-off-by:"
    option mainline
        shortname: m
        longname: mainline
        argument: <parent-number>
        type: string
        help: "select mainline parent"
    option rerereAutoupdate
        longname: rerere-autoupdate
        type: bool
        help: "update the index with reused conflict resolution if possible"
    option strategy
        longname: strategy
        argument: <strategy>
        type: string
        help: "merge strategy"
    option strategyOption
        shortname: X
        longname: strategy-option
        argument: <option>
        type: string
        help: "option for merge strategy"
    option gpgSign
        shortname: S
        longname: gpg-sign
        argument: [=<key-id>]
        optional
        type: string
        help: "GPG sign commit"
    option x
        shortname: x
        type: bool
        help: "append commit name"
    option ff
        longname: ff
        type: bool
        help: "allow fast-forward"
    option allowEmpty
        longname: allow-empty
        type: bool
        help: "preserve initially empty commits"
    option allowEmptyMessage
        longname: allow-empty-message
        type: bool
        help: "allow commits with empty messages"
    option keepRedundantCommits
        longname: keep-redundant-commits
        type: bool
        help: "keep redundant, empty commits"
command clean "clean"
    usage
        "usage: git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <paths>..."
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "do not print names of files removed"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force"
    option interactive
        shortname: i
        longname: interactive
        type: bool
        help: "interactive cleaning"
    option d
        shortname: d
        type: bool
        help: "remove whole directories"
    option exclude
        shortname: e
        longname: exclude
        argument: <pattern>
        type: string
        help: "add <pattern> to ignore rules"
    option x
        shortname: x
        type: bool
        help: "remove ignored files, too"
    option x
        shortname: X
        type: bool
        help: "remove only ignored files"
command clone "clone"
    usage
        "usage: git clone [<options>] [--] <repo> [<dir>]"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be more verbose"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be more quiet"
    option progress
        longname: progress
        type: bool
        help: "force progress reporting"
    option noCheckout
        shortname: n
        longname: no-checkout
        type: bool
        help: "don't create a checkout"
    option bare
        longname: bare
        type: bool
        help: "create a bare repository"
    option naked
        longname: naked
        hidden
        type: bool
        help: "create a bare repository"
    option mirror
        longname: mirror
        type: bool
        help: "create a mirror repository (implies bare)"
    option local
        shortname: l
        longname: local
        type: bool
        help: "to clone from a local repository"
    option noHardlinks
        longname: no-hardlinks
        type: bool
        help: "don't use local hardlinks, always copy"
    option shared
        shortname: s
        longname: shared
        type: bool
        help: "setup as shared repository"
    option recursive
        longname: recursive
        hidden
        argument: [=<pathspec>]
        optional
        type: string
        help: "initialize submodules in the clone"
    option recurseSubmodules
        longname: recurse-submodules
        argument: [=<pathspec>]
        optional
        type: string
        help: "initialize submodules in the clone"
    option jobs
        shortname: j
        longname: jobs
        argument: <n>
        type: int
        help: "number of submodules cloned in parallel"
    option template
        longname: template
        argument: <template-directory>
        type: string
        help: "directory from which templates will be used"
    option reference
        longname: reference
        argument: <repo>
        type: string
        help: "reference repository"
    option referenceIfAble
        longname: reference-if-able
        argument: <repo>
        type: string
        help: "reference repository"
    option dissociate
        longname: dissociate
        type: bool
        help: "use --reference only while cloning"
    option origin
        shortname: o
        longname: origin
        argument: <name>
        type: string
        help: "use <name> instead of 'origin' to track upstream"
    option branch
        shortname: b
        longname: branch
        argument: <branch>
        type: string
        help: "checkout <branch> instead of the remote's HEAD"
    option uploadPack
        shortname: u
        longname: upload-pack
        argument: <path>
        type: string
        help: "path to git-upload-pack on the remote"
    option depth
        longname: depth
        argument: <depth>
        type: string
        help: "create a shallow clone of that depth"
    option shallowSince
        longname: shallow-since
        argument: <time>
        type: string
        help: "create a shallow clone since a specific time"
    option shallowExclude
        longname: shallow-exclude
        argument: <revision>
        type: string
        help: "deepen history of shallow clone, excluding rev"
    option singleBranch
        longname: single-branch
        type: bool
        help: "clone only one branch, HEAD or --branch"
    option noTags
        longname: no-tags
        type: bool
        help: "don't clone any tags, and make later fetches not to follow them"
    option shallowSubmodules
        longname: shallow-submodules
        type: bool
        help: "any cloned submodules will be shallow"
    option separateGitDir
        longname: separate-git-dir
        argument: <gitdir>
        type: string
        help: "separate git dir from working tree"
    option config
        shortname: c
        longname: config
        argument: <key=value>
        type: string
        help: "set config inside the new repository"
    option ipv4
        shortname: 4
        longname: ipv4
        type: bool
        help: "use IPv4 addresses only"
    option ipv6
        shortname: 6
        longname: ipv6
        type: bool
        help: "use IPv6 addresses only"
    option filter
        longname: filter
        argument: <args>
        type: string
        help: "object filtering"
command column "column"
    usage
        "usage: git column [<options>]"
    option command
        longname: command
        argument: <name>
        type: string
        help: "lookup config vars"
    option mode
        longname: mode
        argument: [=<style>]
        optional
        type: string
        help: "layout to use"
    option rawMode
        longname: raw-mode
        argument: <n>
        type: int
        help: "layout to use"
    option width
        longname: width
        argument: <n>
        type: int
        help: "Maximum width"
    option indent
        longname: indent
        argument: <string>
        type: string
        help: "Padding space on left border"
    option nl
        longname: nl
        argument: <n>
        type: int
        help: "Padding space on right border"
    option padding
        longname: padding
        argument: <n>
        type: int
        help: "Padding space between columns"
command commit "commit"
    usage
        "usage: git commit [<options>] [--] <pathspec>..."
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress summary after successful commit"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "show diff in commit message template"
    option
        groupline
    option
        textline: Commit message options
    option file
        shortname: F
        longname: file
        argument: <file>
        type: string
        help: "read message from file"
    option author
        longname: author
        argument: <author>
        type: string
        help: "override author for commit"
    option date
        longname: date
        argument: <date>
        type: string
        help: "override date for commit"
    option message
        shortname: m
        longname: message
        argument: <message>
        type: string
        help: "commit message"
    option reeditMessage
        shortname: c
        longname: reedit-message
        argument: <commit>
        type: string
        help: "reuse and edit message from specified commit"
    option reuseMessage
        shortname: C
        longname: reuse-message
        argument: <commit>
        type: string
        help: "reuse message from specified commit"
    option fixup
        longname: fixup
        argument: <commit>
        type: string
        help: "use autosquash formatted message to fixup specified commit"
    option squash
        longname: squash
        argument: <commit>
        type: string
        help: "use autosquash formatted message to squash specified commit"
    option resetAuthor
        longname: reset-author
        type: bool
        help: "the commit is authored by me now (used with -C/-c/--amend)"
    option signoff
        shortname: s
        longname: signoff
        type: bool
        help: "add Signed-off-by:"
    option template
        shortname: t
        longname: template
        argument: <file>
        type: string
        help: "use specified template file"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "force edit of commit"
    option cleanup
        longname: cleanup
        argument: <default>
        type: string
        help: "how to strip spaces and #comments from message"
    option status
        longname: status
        type: bool
        help: "include status in commit message template"
    option gpgSign
        shortname: S
        longname: gpg-sign
        argument: [=<key-id>]
        optional
        type: string
        help: "GPG sign commit"
    option
        groupline
    option
        textline: Commit contents options
    option all
        shortname: a
        longname: all
        type: bool
        help: "commit all changed files"
    option include
        shortname: i
        longname: include
        type: bool
        help: "add specified files to index for commit"
    option interactive
        longname: interactive
        type: bool
        help: "interactively add files"
    option patch
        shortname: p
        longname: patch
        type: bool
        help: "interactively add changes"
    option only
        shortname: o
        longname: only
        type: bool
        help: "commit only specified files"
    option noVerify
        shortname: n
        longname: no-verify
        type: bool
        help: "bypass pre-commit and commit-msg hooks"
    option dryRun
        longname: dry-run
        type: bool
        help: "show what would be committed"
    option short
        longname: short
        type: bool
        help: "show status concisely"
    option branch
        longname: branch
        type: bool
        help: "show branch information"
    option aheadBehind
        longname: ahead-behind
        type: bool
        help: "compute full ahead/behind values"
    option porcelain
        longname: porcelain
        type: bool
        help: "machine-readable output"
    option long
        longname: long
        type: bool
        help: "show status in long format (default)"
    option null
        shortname: z
        longname: null
        type: bool
        help: "terminate entries with NUL"
    option amend
        longname: amend
        type: bool
        help: "amend previous commit"
    option noPostRewrite
        longname: no-post-rewrite
        type: bool
        help: "bypass post-rewrite hook"
    option untrackedFiles
        shortname: u
        longname: untracked-files
        argument: [=<mode>]
        optional
        type: string
        help: "show untracked files, optional modes: all, normal, no. (Default: all)"
    option allowEmpty
        longname: allow-empty
        hidden
        type: bool
        help: "ok to record an empty change"
    option allowEmptyMessage
        longname: allow-empty-message
        hidden
        type: bool
        help: "ok to record a change with an empty message"
command commitGraph "commit-graph"
    usage
        "usage: git commit-graph [--object-dir <objdir>]"
        "   or: git commit-graph read [--object-dir <objdir>]"
        "   or: git commit-graph verify [--object-dir <objdir>]"
        "   or: git commit-graph write [--object-dir <objdir>] [--append] [--reachable|--stdin-packs|--stdin-commits]"
    option objectDir
        longname: object-dir
        argument: <dir>
        type: string
        help: "The object directory to store the graph"
command commitGraphRead "commit-graph read"
    usage
        "usage: git commit-graph read [--object-dir <objdir>]"
    option objectDir
        longname: object-dir
        argument: <dir>
        type: string
        help: "The object directory to store the graph"
command commitGraphVerify "commit-graph verify"
    usage
        "usage: git commit-graph verify [--object-dir <objdir>]"
    option objectDir
        longname: object-dir
        argument: <dir>
        type: string
        help: "The object directory to store the graph"
command commitGraphWrite "commit-graph write"
    usage
        "usage: git commit-graph write [--object-dir <objdir>] [--append] [--reachable|--stdin-packs|--stdin-commits]"
    option objectDir
        longname: object-dir
        argument: <dir>
        type: string
        help: "The object directory to store the graph"
    option reachable
        longname: reachable
        type: bool
        help: "start walk at all refs"
    option stdinPacks
        longname: stdin-packs
        type: bool
        help: "scan pack-indexes listed by stdin for commits"
    option stdinCommits
        longname: stdin-commits
        type: bool
        help: "start walk at commits listed by stdin"
    option append
        longname: append
        type: bool
        help: "include all commits already in the commit-graph file"
command commitTree "commit-tree"
    usage
        "usage: git commit-tree [(-p <sha1>)...] [-S[<keyid>]] [-m <message>] [-F <file>] <sha1>"
command config "config"
    usage
        "usage: git config [<options>]"
    option
        textline: Config file location
    option global
        longname: global
        type: bool
        help: "use global config file"
    option system
        longname: system
        type: bool
        help: "use system config file"
    option local
        longname: local
        type: bool
        help: "use repository config file"
    option worktree
        longname: worktree
        type: bool
        help: "use per-worktree config file"
    option file
        shortname: f
        longname: file
        argument: <file>
        type: string
        help: "use given config file"
    option blob
        longname: blob
        argument: <blob-id>
        type: string
        help: "read config from given blob object"
    option
        groupline
    option
        textline: Action
    option get
        longname: get
        type: bool
        help: "get value: name [value-regex]"
    option getAll
        longname: get-all
        type: bool
        help: "get all values: key [value-regex]"
    option getRegexp
        longname: get-regexp
        type: bool
        help: "get values for regexp: name-regex [value-regex]"
    option getUrlmatch
        longname: get-urlmatch
        type: bool
        help: "get value specific for the URL: section[.var] URL"
    option replaceAll
        longname: replace-all
        type: bool
        help: "replace all matching variables: name value [value_regex]"
    option add
        longname: add
        type: bool
        help: "add a new variable: name value"
    option unset
        longname: unset
        type: bool
        help: "remove a variable: name [value-regex]"
    option unsetAll
        longname: unset-all
        type: bool
        help: "remove all matches: name [value-regex]"
    option renameSection
        longname: rename-section
        type: bool
        help: "rename section: old-name new-name"
    option removeSection
        longname: remove-section
        type: bool
        help: "remove a section: name"
    option list
        shortname: l
        longname: list
        type: bool
        help: "list all"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "open an editor"
    option getColor
        longname: get-color
        type: bool
        help: "find the color configured: slot [default]"
    option getColorbool
        longname: get-colorbool
        type: bool
        help: "find the color setting: slot [stdout-is-tty]"
    option
        groupline
    option
        textline: Type
    option type
        shortname: t
        longname: type
        argument: <>
        type: string
        help: "value is given this type"
    option bool
        longname: bool
        type: bool
        help: "value is "true" or "false""
    option int
        longname: int
        type: bool
        help: "value is decimal number"
    option boolOrInt
        longname: bool-or-int
        type: bool
        help: "value is --bool or --int"
    option path
        longname: path
        type: bool
        help: "value is a path (file or directory name)"
    option expiryDate
        longname: expiry-date
        type: bool
        help: "value is an expiry date"
    option
        groupline
    option
        textline: Other
    option null
        shortname: z
        longname: null
        type: bool
        help: "terminate values with NUL byte"
    option nameOnly
        longname: name-only
        type: bool
        help: "show variable names only"
    option includes
        longname: includes
        type: bool
        help: "respect include directives on lookup"
    option showOrigin
        longname: show-origin
        type: bool
        help: "show origin of config (file, standard input, blob, command line)"
    option default
        longname: default
        argument: <value>
        type: string
        help: "with --get, use default value when missing entry"
command countObjects "count-objects"
    usage
        "usage: git count-objects [-v] [-H | --human-readable]"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option humanReadable
        shortname: H
        longname: human-readable
        type: bool
        help: "print sizes in human readable format"
command credential "credential"
    usage
        "usage: git credential [fill|approve|reject]"
command credentialStore "credential-store"
    usage
        "usage: git credential-store [<options>] <action>"
    option file
        longname: file
        argument: <path>
        type: string
        help: "fetch and store credentials in <path>"
command cvsexportcommit "cvsexportcommit"
    usage
        "git: 'cvsexportcommit' is not a git command. See 'git --help'."
command cvsimport "cvsimport"
    usage
        "git: 'cvsimport' is not a git command. See 'git --help'."
command daemon "daemon"
    usage
        "usage: git daemon [--verbose] [--syslog] [--export-all]"
        "           [--timeout=<n>] [--init-timeout=<n>] [--max-connections=<n>]"
        "           [--strict-paths] [--base-path=<path>] [--base-path-relaxed]"
        "           [--user-path | --user-path=<path>]"
        "           [--interpolated-path=<path>]"
        "           [--reuseaddr] [--pid-file=<file>]"
        "           [--(enable|disable|allow-override|forbid-override)=<service>]"
        "           [--access-hook=<path>]"
        "           [--inetd | [--listen=<host_or_ipaddr>] [--port=<n>]"
        "                      [--detach] [--user=<user> [--group=<group>]]"
        "           [--log-destination=(stderr|syslog|none)]"
        "           [<directory>...]"
command describe "describe"
    usage
        "usage: git describe [<options>] [<commit-ish>...]"
        "   or: git describe [<options>] --dirty"
    option contains
        longname: contains
        type: bool
        help: "find the tag that comes after the commit"
    option debug
        longname: debug
        type: bool
        help: "debug search strategy on stderr"
    option all
        longname: all
        type: bool
        help: "use any ref"
    option tags
        longname: tags
        type: bool
        help: "use any tag, even unannotated"
    option long
        longname: long
        type: bool
        help: "always use long format"
    option firstParent
        longname: first-parent
        type: bool
        help: "only follow first parent"
    option abbrev
        longname: abbrev
        argument: [=<n>]
        optional
        type: int
        help: "use <n> digits to display SHA-1s"
    option exactMatch
        longname: exact-match
        type: bool
        help: "only output exact matches"
    option candidates
        longname: candidates
        argument: <n>
        type: int
        help: "consider <n> most recent tags (default: 10)"
    option match
        longname: match
        argument: <pattern>
        type: string
        help: "only consider tags matching <pattern>"
    option exclude
        longname: exclude
        argument: <pattern>
        type: string
        help: "do not consider tags matching <pattern>"
    option always
        longname: always
        type: bool
        help: "show abbreviated commit object as fallback"
    option dirty
        longname: dirty
        argument: [=<mark>]
        optional
        type: string
        help: "append <mark> on dirty working tree (default: "-dirty")"
    option broken
        longname: broken
        argument: [=<mark>]
        optional
        type: string
        help: "append <mark> on broken working tree (default: "-broken")"
command diff "diff"
    usage
        "usage: git diff [<options>] [<commit> [<commit>]] [--] [<path>...]"
command difftool "difftool"
    usage
        "usage: git difftool [<options>] [<commit> [<commit>]] [--] [<path>...]"
    option gui
        shortname: g
        longname: gui
        type: bool
        help: "use `diff.guitool` instead of `diff.tool`"
    option dirDiff
        shortname: d
        longname: dir-diff
        type: bool
        help: "perform a full-directory diff"
    option noPrompt
        shortname: y
        longname: no-prompt
        type: bool
        help: "do not prompt before launching a diff tool"
    option symlinks
        longname: symlinks
        type: bool
        help: "use symlinks in dir-diff mode"
    option tool
        shortname: t
        longname: tool
        argument: <tool>
        type: string
        help: "use the specified diff tool"
    option toolHelp
        longname: tool-help
        type: bool
        help: "print a list of diff tools that may be used with `--tool`"
    option trustExitCode
        longname: trust-exit-code
        type: bool
        help: "make 'git-difftool' exit when an invoked diff tool returns a non - zero exit code"
    option extcmd
        shortname: x
        longname: extcmd
        argument: <command>
        type: string
        help: "specify a custom command for viewing diffs"
command fastExport "fast-export"
    usage
        "usage: git fast-export [rev-list-opts]"
    option progress
        longname: progress
        argument: <n>
        type: int
        help: "show progress after <n> objects"
    option signedTags
        longname: signed-tags
        argument: <mode>
        type: string
        help: "select handling of signed tags"
    option tagOfFilteredObject
        longname: tag-of-filtered-object
        argument: <mode>
        type: string
        help: "select handling of tags that tag filtered objects"
    option exportMarks
        longname: export-marks
        argument: <file>
        type: string
        help: "Dump marks to this file"
    option importMarks
        longname: import-marks
        argument: <file>
        type: string
        help: "Import marks from this file"
    option fakeMissingTagger
        longname: fake-missing-tagger
        type: bool
        help: "Fake a tagger when tags lack one"
    option fullTree
        longname: full-tree
        type: bool
        help: "Output full tree for each commit"
    option useDoneFeature
        longname: use-done-feature
        type: bool
        help: "Use the done feature to terminate the stream"
    option noData
        longname: no-data
        type: bool
        help: "Skip output of blob data"
    option refspec
        longname: refspec
        argument: <refspec>
        type: string
        help: "Apply refspec to exported refs"
    option anonymize
        longname: anonymize
        type: bool
        help: "anonymize output"
command fastImport "fast-import"
    usage
        "usage: git fast-import [--date-format=<f>] [--max-pack-size=<n>] [--big-file-threshold=<n>] [--depth=<n>] [--active-branches=<n>] [--export-marks=<marks.file>]"
command fetch "fetch"
    usage
        "usage: git fetch [<options>] [<repository> [<refspec>...]]"
        "   or: git fetch [<options>] <group>"
        "   or: git fetch --multiple [<options>] [(<repository> | <group>)...]"
        "   or: git fetch --all [<options>]"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be more verbose"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be more quiet"
    option all
        longname: all
        type: bool
        help: "fetch from all remotes"
    option append
        shortname: a
        longname: append
        type: bool
        help: "append to .git/FETCH_HEAD instead of overwriting"
    option uploadPack
        longname: upload-pack
        argument: <path>
        type: string
        help: "path to upload pack on remote end"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force overwrite of local reference"
    option multiple
        shortname: m
        longname: multiple
        type: bool
        help: "fetch from multiple remotes"
    option tags
        shortname: t
        longname: tags
        type: bool
        help: "fetch all tags and associated objects"
    option n
        shortname: n
        type: bool
        help: "do not fetch all tags (--no-tags)"
    option jobs
        shortname: j
        longname: jobs
        argument: <n>
        type: int
        help: "number of submodules fetched in parallel"
    option prune
        shortname: p
        longname: prune
        type: bool
        help: "prune remote-tracking branches no longer on remote"
    option pruneTags
        shortname: P
        longname: prune-tags
        type: bool
        help: "prune local tags no longer on remote and clobber changed tags"
    option recurseSubmodules
        longname: recurse-submodules
        argument: [=<on-demand>]
        optional
        type: string
        help: "control recursive fetching of submodules"
    option dryRun
        longname: dry-run
        type: bool
        help: "dry run"
    option keep
        shortname: k
        longname: keep
        type: bool
        help: "keep downloaded pack"
    option updateHeadOk
        shortname: u
        longname: update-head-ok
        type: bool
        help: "allow updating of HEAD ref"
    option progress
        longname: progress
        type: bool
        help: "force progress reporting"
    option depth
        longname: depth
        argument: <depth>
        type: string
        help: "deepen history of shallow clone"
    option shallowSince
        longname: shallow-since
        argument: <time>
        type: string
        help: "deepen history of shallow repository based on time"
    option shallowExclude
        longname: shallow-exclude
        argument: <revision>
        type: string
        help: "deepen history of shallow clone, excluding rev"
    option deepen
        longname: deepen
        argument: <n>
        type: int
        help: "deepen history of shallow clone"
    option unshallow
        longname: unshallow
        type: bool
        help: "convert to a complete repository"
    option submodulePrefix
        longname: submodule-prefix
        hidden
        argument: <dir>
        type: string
        help: "prepend this to submodule path output"
    option recurseSubmodulesDefault
        longname: recurse-submodules-default
        hidden
        argument: <on-demand>
        type: string
        help: "default for recursive fetching of submodules (lower priority than config files)"
    option updateShallow
        longname: update-shallow
        type: bool
        help: "accept refs that update .git/shallow"
    option refmap
        longname: refmap
        argument: <refmap>
        type: string
        help: "specify fetch refmap"
    option serverOption
        shortname: o
        longname: server-option
        argument: <server-specific>
        type: string
        help: "option to transmit"
    option ipv4
        shortname: 4
        longname: ipv4
        type: bool
        help: "use IPv4 addresses only"
    option ipv6
        shortname: 6
        longname: ipv6
        type: bool
        help: "use IPv6 addresses only"
    option negotiationTip
        longname: negotiation-tip
        argument: <revision>
        type: string
        help: "report that we have only objects reachable from this object"
    option filter
        longname: filter
        argument: <args>
        type: string
        help: "object filtering"
command fetchPack "fetch-pack"
    usage
        "usage: git fetch-pack [--all] [--stdin] [--quiet | -q] [--keep | -k] [--thin] [--include-tag] [--upload-pack=<git-upload-pack>] [--depth=<n>] [--no-progress] [--diag-url] [-v] [<host>:]<directory> [<refs>...]"
command filterBranch "filter-branch"
    usage
        "usage: git filter-branch [--setup <command>] [--subdirectory-filter <directory>] [--env-filter <command>]"
        "	[--tree-filter <command>] [--index-filter <command>]"
        "	[--parent-filter <command>] [--msg-filter <command>]"
        "	[--commit-filter <command>] [--tag-name-filter <command>]"
        "	[--original <namespace>]"
        "	[-d <directory>] [-f | --force] [--state-branch <branch>]"
        "	[--] [<rev-list options>...]"
command fmtMergeMsg "fmt-merge-msg"
    usage
        "usage: git fmt-merge-msg [-m <message>] [--log[=<n>] | --no-log] [--file <file>]"
    option log
        longname: log
        argument: [=<n>]
        optional
        type: int
        help: "populate log with at most <n> entries from shortlog"
    option summary
        longname: summary
        hidden
        argument: [=<n>]
        optional
        type: int
        help: "alias for --log (deprecated)"
    option message
        shortname: m
        longname: message
        argument: <text>
        type: string
        help: "use <text> as start of message"
    option file
        shortname: F
        longname: file
        argument: <file>
        type: string
        help: "file to read from"
command forEachRef "for-each-ref"
    usage
        "usage: git for-each-ref [<options>] [<pattern>]"
        "   or: git for-each-ref [--points-at <object>]"
        "   or: git for-each-ref [(--merged | --no-merged) [<commit>]]"
        "   or: git for-each-ref [--contains [<commit>]] [--no-contains [<commit>]]"
    option shell
        shortname: s
        longname: shell
        type: bool
        help: "quote placeholders suitably for shells"
    option perl
        shortname: p
        longname: perl
        type: bool
        help: "quote placeholders suitably for perl"
    option python
        longname: python
        type: bool
        help: "quote placeholders suitably for python"
    option tcl
        longname: tcl
        type: bool
        help: "quote placeholders suitably for Tcl"
    option
        groupline
    option count
        longname: count
        argument: <n>
        type: int
        help: "show only <n> matched refs"
    option format
        longname: format
        argument: <format>
        type: string
        help: "format to use for the output"
    option color
        longname: color
        argument: [=<when>]
        optional
        type: string
        help: "respect format colors"
    option sort
        longname: sort
        argument: <key>
        type: string
        help: "field name to sort on"
    option pointsAt
        longname: points-at
        argument: <object>
        type: string
        help: "print only refs which points at the given object"
    option merged
        longname: merged
        argument: <commit>
        type: string
        help: "print only refs that are merged"
    option noMerged
        longname: no-merged
        argument: <commit>
        type: string
        help: "print only refs that are not merged"
    option contains
        longname: contains
        argument: <commit>
        type: string
        help: "print only refs which contain the commit"
    option noContains
        longname: no-contains
        argument: <commit>
        type: string
        help: "print only refs which don't contain the commit"
    option ignoreCase
        longname: ignore-case
        type: bool
        help: "sorting and filtering are case insensitive"
command formatPatch "format-patch"
    usage
        "usage: git format-patch [<options>] [<since> | <revision-range>]"
    option numbered
        shortname: n
        longname: numbered
        type: bool
        help: "use [PATCH n/m] even with a single patch"
    option noNumbered
        shortname: N
        longname: no-numbered
        type: bool
        help: "use [PATCH] even with multiple patches"
    option signoff
        shortname: s
        longname: signoff
        type: bool
        help: "add Signed-off-by:"
    option stdout
        longname: stdout
        type: bool
        help: "print patches to standard out"
    option coverLetter
        longname: cover-letter
        type: bool
        help: "generate a cover letter"
    option numberedFiles
        longname: numbered-files
        type: bool
        help: "use simple number sequence for output file names"
    option suffix
        longname: suffix
        argument: <sfx>
        type: string
        help: "use <sfx> instead of '.patch'"
    option startNumber
        longname: start-number
        argument: <n>
        type: int
        help: "start numbering patches at <n> instead of 1"
    option rerollCount
        shortname: v
        longname: reroll-count
        argument: <n>
        type: int
        help: "mark the series as Nth re-roll"
    option rfc
        longname: rfc
        type: bool
        help: "Use [RFC PATCH] instead of [PATCH]"
    option subjectPrefix
        longname: subject-prefix
        argument: <prefix>
        type: string
        help: "Use [<prefix>] instead of [PATCH]"
    option outputDirectory
        shortname: o
        longname: output-directory
        argument: <dir>
        type: string
        help: "store resulting files in <dir>"
    option keepSubject
        shortname: k
        longname: keep-subject
        type: bool
        help: "don't strip/add [PATCH]"
    option noBinary
        longname: no-binary
        type: bool
        help: "don't output binary diffs"
    option zeroCommit
        longname: zero-commit
        type: bool
        help: "output all-zero hash in From header"
    option ignoreIfInUpstream
        longname: ignore-if-in-upstream
        type: bool
        help: "don't include a patch matching a commit upstream"
    option noStat
        shortname: p
        longname: no-stat
        type: bool
        help: "show patch format instead of default (patch + stat)"
    option
        groupline
    option
        textline: Messaging
    option addHeader
        longname: add-header
        argument: <header>
        type: string
        help: "add email header"
    option to
        longname: to
        argument: <email>
        type: string
        help: "add To: header"
    option cc
        longname: cc
        argument: <email>
        type: string
        help: "add Cc: header"
    option from
        longname: from
        argument: [=<ident>]
        optional
        type: string
        help: "set From address to <ident> (or committer ident if absent)"
    option inReplyTo
        longname: in-reply-to
        argument: <message-id>
        type: string
        help: "make first mail a reply to <message-id>"
    option attach
        longname: attach
        argument: [=<boundary>]
        optional
        type: string
        help: "attach the patch"
    option inline
        longname: inline
        argument: [=<boundary>]
        optional
        type: string
        help: "inline the patch"
    option thread
        longname: thread
        argument: [=<style>]
        optional
        type: string
        help: "enable message threading, styles: shallow, deep"
    option signature
        longname: signature
        argument: <signature>
        type: string
        help: "add a signature"
    option base
        longname: base
        argument: <base-commit>
        type: string
        help: "add prerequisite tree info to the patch series"
    option signatureFile
        longname: signature-file
        argument: <file>
        type: string
        help: "add a signature from a file"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "don't print the patch filenames"
    option progress
        longname: progress
        type: bool
        help: "show progress while generating patches"
    option interdiff
        longname: interdiff
        argument: <rev>
        type: string
        help: "show changes against <rev> in cover letter or single patch"
    option rangeDiff
        longname: range-diff
        argument: <refspec>
        type: string
        help: "show changes against <refspec> in cover letter or single patch"
    option creationFactor
        longname: creation-factor
        argument: <n>
        type: int
        help: "percentage by which creation is weighted"
command fsck "fsck"
    usage
        "usage: git fsck [<options>] [<object>...]"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option unreachable
        longname: unreachable
        type: bool
        help: "show unreachable objects"
    option dangling
        longname: dangling
        type: bool
        help: "show dangling objects"
    option tags
        longname: tags
        type: bool
        help: "report tags"
    option root
        longname: root
        type: bool
        help: "report root nodes"
    option cache
        longname: cache
        type: bool
        help: "make index objects head nodes"
    option reflogs
        longname: reflogs
        type: bool
        help: "make reflogs head nodes (default)"
    option full
        longname: full
        type: bool
        help: "also consider packs and alternate objects"
    option connectivityOnly
        longname: connectivity-only
        type: bool
        help: "check only connectivity"
    option strict
        longname: strict
        type: bool
        help: "enable more strict checking"
    option lostFound
        longname: lost-found
        type: bool
        help: "write dangling objects in .git/lost-found"
    option progress
        longname: progress
        type: bool
        help: "show progress"
    option nameObjects
        longname: name-objects
        type: bool
        help: "show verbose names for reachable objects"
command gc "gc"
    usage
        "usage: git gc [<options>]"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress progress reporting"
    option prune
        longname: prune
        argument: [=<date>]
        optional
        type: string
        help: "prune unreferenced objects"
    option aggressive
        longname: aggressive
        type: bool
        help: "be more thorough (increased runtime)"
    option auto
        longname: auto
        type: bool
        help: "enable auto-gc mode"
    option force
        longname: force
        type: bool
        help: "force running gc even if there may be another gc running"
    option keepLargestPack
        longname: keep-largest-pack
        type: bool
        help: "repack all other packs except the largest pack"
command getTarCommitId "get-tar-commit-id"
    usage
        "usage: git get-tar-commit-id"
command grep "grep"
    usage
        "usage: git grep [<options>] [-e] <pattern> [<rev>...] [[--] <path>...]"
    option cached
        longname: cached
        type: bool
        help: "search in index instead of in the work tree"
    option noIndex
        longname: no-index
        type: bool
        help: "find in contents not managed by git"
    option untracked
        longname: untracked
        type: bool
        help: "search in both tracked and untracked files"
    option excludeStandard
        longname: exclude-standard
        type: bool
        help: "ignore files specified via '.gitignore'"
    option recurseSubmodules
        longname: recurse-submodules
        type: bool
        help: "recursively search in each submodule"
    option
        groupline
    option invertMatch
        shortname: v
        longname: invert-match
        type: bool
        help: "show non-matching lines"
    option ignoreCase
        shortname: i
        longname: ignore-case
        type: bool
        help: "case insensitive matching"
    option wordRegexp
        shortname: w
        longname: word-regexp
        type: bool
        help: "match patterns only at word boundaries"
    option text
        shortname: a
        longname: text
        type: bool
        help: "process binary files as text"
    option i
        shortname: I
        type: bool
        help: "don't match patterns in binary files"
    option textconv
        longname: textconv
        type: bool
        help: "process binary files with textconv filters"
    option recursive
        shortname: r
        longname: recursive
        type: bool
        help: "search in subdirectories (default)"
    option maxDepth
        longname: max-depth
        argument: <depth>
        type: string
        help: "descend at most <depth> levels"
    option
        groupline
    option extendedRegexp
        shortname: E
        longname: extended-regexp
        type: bool
        help: "use extended POSIX regular expressions"
    option basicRegexp
        shortname: G
        longname: basic-regexp
        type: bool
        help: "use basic POSIX regular expressions (default)"
    option fixedStrings
        shortname: F
        longname: fixed-strings
        type: bool
        help: "interpret patterns as fixed strings"
    option perlRegexp
        shortname: P
        longname: perl-regexp
        type: bool
        help: "use Perl-compatible regular expressions"
    option
        groupline
    option lineNumber
        shortname: n
        longname: line-number
        type: bool
        help: "show line numbers"
    option column
        longname: column
        type: bool
        help: "show column number of first match"
    option h
        shortname: h
        type: bool
        help: "don't show filenames"
    option h
        shortname: H
        type: bool
        help: "show filenames"
    option fullName
        longname: full-name
        type: bool
        help: "show filenames relative to top directory"
    option filesWithMatches
        shortname: l
        longname: files-with-matches
        type: bool
        help: "show only filenames instead of matching lines"
    option nameOnly
        longname: name-only
        type: bool
        help: "synonym for --files-with-matches"
    option filesWithoutMatch
        shortname: L
        longname: files-without-match
        type: bool
        help: "show only the names of files without match"
    option null
        shortname: z
        longname: null
        type: bool
        help: "print NUL after filenames"
    option onlyMatching
        shortname: o
        longname: only-matching
        type: bool
        help: "show only matching parts of a line"
    option count
        shortname: c
        longname: count
        type: bool
        help: "show the number of matches instead of matching lines"
    option color
        longname: color
        argument: [=<when>]
        optional
        type: string
        help: "highlight matches"
    option break
        longname: break
        type: bool
        help: "print empty line between matches from different files"
    option heading
        longname: heading
        type: bool
        help: "show filename only once above matches from same file"
    option
        groupline
    option context
        shortname: C
        longname: context
        argument: <n>
        type: int
        help: "show <n> context lines before and after matches"
    option beforeContext
        shortname: B
        longname: before-context
        argument: <n>
        type: int
        help: "show <n> context lines before matches"
    option afterContext
        shortname: A
        longname: after-context
        argument: <n>
        type: int
        help: "show <n> context lines after matches"
    option threads
        longname: threads
        argument: <n>
        type: int
        help: "use <n> worker threads"
    option nUM
        numopt
        type: bool
        help: "shortcut for -C NUM"
    option showFunction
        shortname: p
        longname: show-function
        type: bool
        help: "show a line with the function name before matches"
    option functionContext
        shortname: W
        longname: function-context
        type: bool
        help: "show the surrounding function"
    option
        groupline
    option f
        shortname: f
        argument: <file>
        type: string
        help: "read patterns from file"
    option e
        shortname: e
        argument: <pattern>
        type: string
        help: "match <pattern>"
    option and
        longname: and
        type: bool
        help: "combine patterns specified with -e"
    option or
        longname: or
        type: bool
    option not
        longname: not
        type: bool
    option
        textline:     (
    option
        textline:     )
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "indicate hit with exit status without output"
    option allMatch
        longname: all-match
        type: bool
        help: "show only matches from files that match all patterns"
    option debug
        longname: debug
        hidden
        type: bool
        help: "show parse tree for grep expression"
    option
        groupline
    option openFilesInPager
        shortname: O
        longname: open-files-in-pager
        argument: [=<pager>]
        optional
        type: string
        help: "show matching files in the pager"
    option extGrep
        longname: ext-grep
        type: bool
        help: "allow calling of grep(1) (ignored by this build)"
command hashObject "hash-object"
    usage
        "usage: git hash-object [-t <type>] [-w] [--path=<file> | --no-filters] [--stdin] [--] <file>..."
        "   or: git hash-object  --stdin-paths"
    option t
        shortname: t
        argument: <type>
        type: string
        help: "object type"
    option w
        shortname: w
        type: bool
        help: "write the object into the object database"
    option stdin
        longname: stdin
        type: bool
        help: "read the object from stdin"
    option stdinPaths
        longname: stdin-paths
        type: bool
        help: "read file names from stdin"
    option noFilters
        longname: no-filters
        type: bool
        help: "store file as is without filters"
    option literally
        longname: literally
        type: bool
        help: "just hash any random garbage to create corrupt objects for debugging Git"
    option path
        longname: path
        argument: <file>
        type: string
        help: "process file as it were from this path"
command help "help"
    usage
        "usage: git help [--all] [--guides] [--man | --web | --info] [<command>]"
    option all
        shortname: a
        longname: all
        type: bool
        help: "print all available commands"
    option excludeGuides
        longname: exclude-guides
        hidden
        type: bool
        help: "exclude guides"
    option guides
        shortname: g
        longname: guides
        type: bool
        help: "print list of useful guides"
    option config
        shortname: c
        longname: config
        type: bool
        help: "print all configuration variable names"
    option configForCompletion
        longname: config-for-completion
        hidden
        type: bool
    option man
        shortname: m
        longname: man
        type: bool
        help: "show man page"
    option web
        shortname: w
        longname: web
        type: bool
        help: "show manual in web browser"
    option info
        shortname: i
        longname: info
        type: bool
        help: "show info page"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "print command description"
command httpFetch "http-fetch"
    usage
        "usage: git http-fetch [-c] [-t] [-a] [-v] [--recover] [-w ref] [--stdin] commit-id url"
command httpPush "http-push"
    usage
        "usage: git http-push [--all] [--dry-run] [--force] [--verbose] <remote> [<head>...]"
command imapSend "imap-send"
    usage
        "usage: git imap-send [-v] [-q] [--[no-]curl] < <mbox>"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be more verbose"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be more quiet"
    option curl
        longname: curl
        type: bool
        help: "use libcurl to communicate with the IMAP server"
command indexPack "index-pack"
    usage
        "usage: git index-pack [-v] [-o <index-file>] [--keep | --keep=<msg>] [--verify] [--strict] (<pack-file> | --stdin [--fix-thin] [<pack-file>])"
command init "init"
    usage
        "usage: git init [-q | --quiet] [--bare] [--template=<template-directory>] [--shared[=<permissions>]] [<directory>]"
    option template
        longname: template
        argument: <template-directory>
        type: string
        help: "directory from which templates will be used"
    option bare
        longname: bare
        type: bool
        help: "create a bare repository"
    option shared
        longname: shared
        argument: [=<permissions>]
        optional
        type: string
        help: "specify that the git repository is to be shared amongst several users"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be quiet"
    option separateGitDir
        longname: separate-git-dir
        argument: <gitdir>
        type: string
        help: "separate git dir from working tree"
command instaweb "instaweb"
    usage
        "usage: git instaweb [options] (--start | --stop | --restart)"
    option local
        shortname: l
        longname: local
        type: bool
        help: "only bind on 127.0.0.1"
    option port
        shortname: p
        longname: port
        argument: ...
        type: string
        help: "the port to bind to"
    option httpd
        shortname: d
        longname: httpd
        argument: ...
        type: string
        help: "the command to launch"
    option browser
        shortname: b
        longname: browser
        argument: ...
        type: string
        help: "the browser to launch"
    option modulePath
        shortname: m
        longname: module-path
        argument: ...
        type: string
        help: "the module path (only needed for apache2)"
    option
        groupline
    option
        textline: Action
    option stop
        longname: stop
        type: bool
        help: "stop the web server"
    option start
        longname: start
        type: bool
        help: "start the web server"
    option restart
        longname: restart
        type: bool
        help: "restart the web server"
command interpretTrailers "interpret-trailers"
    usage
        "usage: git interpret-trailers [--in-place] [--trim-empty] [(--trailer <token>[(=|:)<value>])...] [<file>...]"
    option inPlace
        longname: in-place
        type: bool
        help: "edit files in place"
    option trimEmpty
        longname: trim-empty
        type: bool
        help: "trim empty trailers"
    option where
        longname: where
        argument: <action>
        type: string
        help: "where to place the new trailer"
    option ifExists
        longname: if-exists
        argument: <action>
        type: string
        help: "action if trailer already exists"
    option ifMissing
        longname: if-missing
        argument: <action>
        type: string
        help: "action if trailer is missing"
    option onlyTrailers
        longname: only-trailers
        type: bool
        help: "output only the trailers"
    option onlyInput
        longname: only-input
        type: bool
        help: "do not apply config rules"
    option unfold
        longname: unfold
        type: bool
        help: "join whitespace-continued values"
    option parse
        longname: parse
        type: bool
        help: "set parsing options"
    option noDivider
        longname: no-divider
        type: bool
        help: "do not treat --- specially"
    option trailer
        longname: trailer
        argument: <trailer>
        type: string
        help: "trailer(s) to add"
command log "log"
    usage
        "usage: git log [<options>] [<revision-range>] [[--] <path>...]"
        "   or: git show [<options>] <object>..."
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress diff output"
    option source
        longname: source
        type: bool
        help: "show source"
    option useMailmap
        longname: use-mailmap
        type: bool
        help: "Use mail map file"
    option decorateRefs
        longname: decorate-refs
        argument: <pattern>
        type: string
        help: "only decorate refs that match <pattern>"
    option decorateRefsExclude
        longname: decorate-refs-exclude
        argument: <pattern>
        type: string
        help: "do not decorate refs that match <pattern>"
    option decorate
        longname: decorate
        argument: [=...]
        optional
        type: string
        help: "decorate options"
    option l
        shortname: L
        argument: <n,m:file>
        type: string
        help: "Process line range n,m in file, counting from 1"
command lsFiles "ls-files"
    usage
        "usage: git ls-files [<options>] [<file>...]"
    option z
        shortname: z
        type: bool
        help: "paths are separated with NUL character"
    option t
        shortname: t
        type: bool
        help: "identify the file status with tags"
    option v
        shortname: v
        type: bool
        help: "use lowercase letters for 'assume unchanged' files"
    option f
        shortname: f
        type: bool
        help: "use lowercase letters for 'fsmonitor clean' files"
    option cached
        shortname: c
        longname: cached
        type: bool
        help: "show cached files in the output (default)"
    option deleted
        shortname: d
        longname: deleted
        type: bool
        help: "show deleted files in the output"
    option modified
        shortname: m
        longname: modified
        type: bool
        help: "show modified files in the output"
    option others
        shortname: o
        longname: others
        type: bool
        help: "show other files in the output"
    option ignored
        shortname: i
        longname: ignored
        type: bool
        help: "show ignored files in the output"
    option stage
        shortname: s
        longname: stage
        type: bool
        help: "show staged contents' object name in the output"
    option killed
        shortname: k
        longname: killed
        type: bool
        help: "show files on the filesystem that need to be removed"
    option directory
        longname: directory
        type: bool
        help: "show 'other' directories' names only"
    option eol
        longname: eol
        type: bool
        help: "show line endings of files"
    option emptyDirectory
        longname: empty-directory
        type: bool
        help: "don't show empty directories"
    option unmerged
        shortname: u
        longname: unmerged
        type: bool
        help: "show unmerged files in the output"
    option resolveUndo
        longname: resolve-undo
        type: bool
        help: "show resolve-undo information"
    option exclude
        shortname: x
        longname: exclude
        argument: <pattern>
        type: string
        help: "skip files matching pattern"
    option excludeFrom
        shortname: X
        longname: exclude-from
        argument: <file>
        type: string
        help: "exclude patterns are read from <file>"
    option excludePerDirectory
        longname: exclude-per-directory
        argument: <file>
        type: string
        help: "read additional per-directory exclude patterns in <file>"
    option excludeStandard
        longname: exclude-standard
        type: bool
        help: "add the standard git exclusions"
    option fullName
        longname: full-name
        type: bool
        help: "make the output relative to the project top directory"
    option recurseSubmodules
        longname: recurse-submodules
        type: bool
        help: "recurse through submodules"
    option errorUnmatch
        longname: error-unmatch
        type: bool
        help: "if any <file> is not in the index, treat this as an error"
    option withTree
        longname: with-tree
        argument: <tree-ish>
        type: string
        help: "pretend that paths removed since <tree-ish> are still present"
    option abbrev
        longname: abbrev
        argument: [=<n>]
        optional
        type: int
        help: "use <n> digits to display SHA-1s"
    option debug
        longname: debug
        type: bool
        help: "show debugging data"
command lsRemote "ls-remote"
    usage
        "usage: git ls-remote [--heads] [--tags] [--refs] [--upload-pack=<exec>]"
        "                     [-q | --quiet] [--exit-code] [--get-url]"
        "                     [--symref] [<repository> [<refs>...]]"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "do not print remote URL"
    option uploadPack
        longname: upload-pack
        argument: <exec>
        type: string
        help: "path of git-upload-pack on the remote host"
    option exec
        longname: exec
        hidden
        argument: <exec>
        type: string
        help: "path of git-upload-pack on the remote host"
    option tags
        shortname: t
        longname: tags
        type: bool
        help: "limit to tags"
    option heads
        shortname: h
        longname: heads
        type: bool
        help: "limit to heads"
    option refs
        longname: refs
        type: bool
        help: "do not show peeled tags"
    option getUrl
        longname: get-url
        type: bool
        help: "take url.<base>.insteadOf into account"
    option sort
        longname: sort
        argument: <key>
        type: string
        help: "field name to sort on"
    option exitCode
        longname: exit-code
        type: bool
        help: "exit with exit code 2 if no matching refs are found"
    option symref
        longname: symref
        type: bool
        help: "show underlying ref in addition to the object pointed by it"
    option serverOption
        shortname: o
        longname: server-option
        argument: <server-specific>
        type: string
        help: "option to transmit"
command lsTree "ls-tree"
    usage
        "usage: git ls-tree [<options>] <tree-ish> [<path>...]"
    option d
        shortname: d
        type: bool
        help: "only show trees"
    option r
        shortname: r
        type: bool
        help: "recurse into subtrees"
    option t
        shortname: t
        type: bool
        help: "show trees when recursing"
    option z
        shortname: z
        type: bool
        help: "terminate entries with NUL byte"
    option long
        shortname: l
        longname: long
        type: bool
        help: "include object size"
    option nameOnly
        longname: name-only
        type: bool
        help: "list only filenames"
    option nameStatus
        longname: name-status
        type: bool
        help: "list only filenames"
    option fullName
        longname: full-name
        type: bool
        help: "use full path names"
    option fullTree
        longname: full-tree
        type: bool
        help: "list entire tree; not just current directory (implies --full-name)"
    option abbrev
        longname: abbrev
        argument: [=<n>]
        optional
        type: int
        help: "use <n> digits to display SHA-1s"
command mailinfo "mailinfo"
    usage
        "usage: git mailinfo [-k | -b] [-m | --message-id] [-u | --encoding=<encoding> | -n] [--scissors | --no-scissors] <msg> <patch> < mail >info"
command mailsplit "mailsplit"
    usage
        "usage: git mailsplit [-d<prec>] [-f<n>] [-b] [--keep-cr] -o<directory> [(<mbox>|<Maildir>)...]"
command merge "merge"
    usage
        "usage: git merge [<options>] [<commit>...]"
        "   or: git merge --abort"
        "   or: git merge --continue"
    option n
        shortname: n
        type: bool
        help: "do not show a diffstat at the end of the merge"
    option stat
        longname: stat
        type: bool
        help: "show a diffstat at the end of the merge"
    option summary
        longname: summary
        type: bool
        help: "(synonym to --stat)"
    option log
        longname: log
        argument: [=<n>]
        optional
        type: int
        help: "add (at most <n>) entries from shortlog to merge commit message"
    option squash
        longname: squash
        type: bool
        help: "create a single commit instead of doing a merge"
    option commit
        longname: commit
        type: bool
        help: "perform a commit if the merge succeeds (default)"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "edit message before committing"
    option ff
        longname: ff
        type: bool
        help: "allow fast-forward (default)"
    option ffOnly
        longname: ff-only
        type: bool
        help: "abort if fast-forward is not possible"
    option rerereAutoupdate
        longname: rerere-autoupdate
        type: bool
        help: "update the index with reused conflict resolution if possible"
    option verifySignatures
        longname: verify-signatures
        type: bool
        help: "verify that the named commit has a valid GPG signature"
    option strategy
        shortname: s
        longname: strategy
        argument: <strategy>
        type: string
        help: "merge strategy to use"
    option strategyOption
        shortname: X
        longname: strategy-option
        argument: <option=value>
        type: string
        help: "option for selected merge strategy"
    option message
        shortname: m
        longname: message
        argument: <message>
        type: string
        help: "merge commit message (for a non-fast-forward merge)"
    option file
        shortname: F
        longname: file
        argument: <path>
        type: string
        help: "read message from file"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be more verbose"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be more quiet"
    option abort
        longname: abort
        type: bool
        help: "abort the current in-progress merge"
    option continue
        longname: continue
        type: bool
        help: "continue the current in-progress merge"
    option allowUnrelatedHistories
        longname: allow-unrelated-histories
        type: bool
        help: "allow merging unrelated histories"
    option progress
        longname: progress
        type: bool
        help: "force progress reporting"
    option gpgSign
        shortname: S
        longname: gpg-sign
        argument: [=<key-id>]
        optional
        type: string
        help: "GPG sign commit"
    option overwriteIgnore
        longname: overwrite-ignore
        type: bool
        help: "update ignored files (default)"
    option signoff
        longname: signoff
        type: bool
        help: "add Signed-off-by:"
    option verify
        longname: verify
        type: bool
        help: "verify commit-msg hook"
command mergeBase "merge-base"
    usage
        "usage: git merge-base [-a | --all] <commit> <commit>..."
        "   or: git merge-base [-a | --all] --octopus <commit>..."
        "   or: git merge-base --independent <commit>..."
        "   or: git merge-base --is-ancestor <commit> <commit>"
        "   or: git merge-base --fork-point <ref> [<commit>]"
    option all
        shortname: a
        longname: all
        type: bool
        help: "output all common ancestors"
    option octopus
        longname: octopus
        type: bool
        help: "find ancestors for a single n-way merge"
    option independent
        longname: independent
        type: bool
        help: "list revs not reachable from others"
    option isAncestor
        longname: is-ancestor
        type: bool
        help: "is the first one ancestor of the other?"
    option forkPoint
        longname: fork-point
        type: bool
        help: "find where <commit> forked from reflog of <ref>"
command mergeFile "merge-file"
    usage
        "usage: git merge-file [<options>] [-L <name1> [-L <orig> [-L <name2>]]] <file1> <orig-file> <file2>"
    option stdout
        shortname: p
        longname: stdout
        type: bool
        help: "send results to standard output"
    option diff3
        longname: diff3
        type: bool
        help: "use a diff3 based merge"
    option ours
        longname: ours
        type: bool
        help: "for conflicts, use our version"
    option theirs
        longname: theirs
        type: bool
        help: "for conflicts, use their version"
    option union
        longname: union
        type: bool
        help: "for conflicts, use a union version"
    option markerSize
        longname: marker-size
        argument: <n>
        type: int
        help: "for conflicts, use this marker size"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "do not warn about conflicts"
    option l
        shortname: L
        argument: <name>
        type: string
        help: "set labels for file1/orig-file/file2"
command mergeIndex "merge-index"
    usage
        "usage: git merge-index [-o] [-q] <merge-program> (-a | [--] [<filename>...])"
command mergeOneFile "merge-one-file"
    usage
        "usage: git merge-one-file <orig blob> <our blob> <their blob> <path> <orig mode> <our mode> <their mode>"
        ""
        "usage: git merge-one-file <orig blob> <our blob> <their blob> <path> <orig mode> <our mode> <their mode>"
        ""
        "Blob ids and modes should be empty for missing files."
command mergetool "mergetool"
    usage
        "usage: git mergetool [--tool=tool] [--tool-help] [-y|--no-prompt|--prompt] [-g|--gui|--no-gui] [-O<orderfile>] [file to merge] ..."
command mergeTree "merge-tree"
    usage
        "usage: git merge-tree <base-tree> <branch1> <branch2>"
command mktag "mktag"
    usage
        "usage: git mktag"
command mktree "mktree"
    usage
        "usage: git mktree [-z] [--missing] [--batch]"
    option z
        shortname: z
        type: bool
        help: "input is NUL terminated"
    option missing
        longname: missing
        type: bool
        help: "allow missing objects"
    option batch
        longname: batch
        type: bool
        help: "allow creation of more than one tree"
command mv "mv"
    usage
        "usage: git mv [<options>] <source>... <destination>"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force move/rename even if target exists"
    option k
        shortname: k
        type: bool
        help: "skip move/rename errors"
command nameRev "name-rev"
    usage
        "usage: git name-rev [<options>] <commit>..."
        "   or: git name-rev [<options>] --all"
        "   or: git name-rev [<options>] --stdin"
    option nameOnly
        longname: name-only
        type: bool
        help: "print only names (no SHA-1)"
    option tags
        longname: tags
        type: bool
        help: "only use tags to name the commits"
    option refs
        longname: refs
        argument: <pattern>
        type: string
        help: "only use refs matching <pattern>"
    option exclude
        longname: exclude
        argument: <pattern>
        type: string
        help: "ignore refs matching <pattern>"
    option
        groupline
    option all
        longname: all
        type: bool
        help: "list all commits reachable from all refs"
    option stdin
        longname: stdin
        type: bool
        help: "read from stdin"
    option undefined
        longname: undefined
        type: bool
        help: "allow to print `undefined` names (default)"
    option always
        longname: always
        type: bool
        help: "show abbreviated commit object as fallback"
    option peelTag
        longname: peel-tag
        hidden
        type: bool
        help: "dereference tags in the input (internal use)"
command notes "notes"
    usage
        "usage: git notes [--ref <notes-ref>] [list [<object>]]"
        "   or: git notes [--ref <notes-ref>] add [-f] [--allow-empty] [-m <msg> | -F <file> | (-c | -C) <object>] [<object>]"
        "   or: git notes [--ref <notes-ref>] copy [-f] <from-object> <to-object>"
        "   or: git notes [--ref <notes-ref>] append [--allow-empty] [-m <msg> | -F <file> | (-c | -C) <object>] [<object>]"
        "   or: git notes [--ref <notes-ref>] edit [--allow-empty] [<object>]"
        "   or: git notes [--ref <notes-ref>] show [<object>]"
        "   or: git notes [--ref <notes-ref>] merge [-v | -q] [-s <strategy>] <notes-ref>"
        "   or: git notes merge --commit [-v | -q]"
        "   or: git notes merge --abort [-v | -q]"
        "   or: git notes [--ref <notes-ref>] remove [<object>...]"
        "   or: git notes [--ref <notes-ref>] prune [-n] [-v]"
        "   or: git notes [--ref <notes-ref>] get-ref"
    option ref
        longname: ref
        argument: <notes-ref>
        type: string
        help: "use notes from <notes-ref>"
command notesAdd "notes add"
    usage
        "usage: git notes add [<options>] [<object>]"
    option message
        shortname: m
        longname: message
        argument: <message>
        type: string
        help: "note contents as a string"
    option file
        shortname: F
        longname: file
        argument: <file>
        type: string
        help: "note contents in a file"
    option reeditMessage
        shortname: c
        longname: reedit-message
        argument: <object>
        type: string
        help: "reuse and edit specified note object"
    option reuseMessage
        shortname: C
        longname: reuse-message
        argument: <object>
        type: string
        help: "reuse specified note object"
    option allowEmpty
        longname: allow-empty
        type: bool
        help: "allow storing empty note"
    option force
        shortname: f
        longname: force
        type: bool
        help: "replace existing notes"
command notesCopy "notes copy"
    usage
        "usage: git notes copy [<options>] <from-object> <to-object>"
        "   or: git notes copy --stdin [<from-object> <to-object>]..."
    option force
        shortname: f
        longname: force
        type: bool
        help: "replace existing notes"
    option stdin
        longname: stdin
        type: bool
        help: "read objects from stdin"
    option forRewrite
        longname: for-rewrite
        argument: <command>
        type: string
        help: "load rewriting config for <command> (implies --stdin)"
command notesAppend "notes append"
    usage
        "usage: git notes append [<options>] [<object>]"
    option message
        shortname: m
        longname: message
        argument: <message>
        type: string
        help: "note contents as a string"
    option file
        shortname: F
        longname: file
        argument: <file>
        type: string
        help: "note contents in a file"
    option reeditMessage
        shortname: c
        longname: reedit-message
        argument: <object>
        type: string
        help: "reuse and edit specified note object"
    option reuseMessage
        shortname: C
        longname: reuse-message
        argument: <object>
        type: string
        help: "reuse specified note object"
    option allowEmpty
        longname: allow-empty
        type: bool
        help: "allow storing empty note"
command notesEdit "notes edit"
    usage
        "usage: git notes edit [<object>]"
    option message
        shortname: m
        longname: message
        argument: <message>
        type: string
        help: "note contents as a string"
    option file
        shortname: F
        longname: file
        argument: <file>
        type: string
        help: "note contents in a file"
    option reeditMessage
        shortname: c
        longname: reedit-message
        argument: <object>
        type: string
        help: "reuse and edit specified note object"
    option reuseMessage
        shortname: C
        longname: reuse-message
        argument: <object>
        type: string
        help: "reuse specified note object"
    option allowEmpty
        longname: allow-empty
        type: bool
        help: "allow storing empty note"
command notesShow "notes show"
    usage
        "usage: git notes show [<object>]"
command notesMerge "notes merge"
    usage
        "usage: git notes merge [<options>] <notes-ref>"
        "   or: git notes merge --commit [<options>]"
        "   or: git notes merge --abort [<options>]"
    option
        textline: General options
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be more verbose"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be more quiet"
    option
        groupline
    option
        textline: Merge options
    option strategy
        shortname: s
        longname: strategy
        argument: <strategy>
        type: string
        help: "resolve notes conflicts using the given strategy (manual/ours/theirs/union/cat_sort_uniq)"
    option
        groupline
    option
        textline: Committing unmerged notes
    option commit
        longname: commit
        type: bool
        help: "finalize notes merge by committing unmerged notes"
    option
        groupline
    option
        textline: Aborting notes merge resolution
    option abort
        longname: abort
        type: bool
        help: "abort notes merge"
command notesRemove "notes remove"
    usage
        "usage: git notes remove [<object>]"
    option ignoreMissing
        longname: ignore-missing
        type: bool
        help: "attempt to remove non-existent note is not an error"
    option stdin
        longname: stdin
        type: bool
        help: "read object names from the standard input"
command notesPrune "notes prune"
    usage
        "usage: git notes prune [<options>]"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "do not remove, show only"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "report pruned notes"
command notesGetRef "notes get-ref"
    usage
        "usage: git notes get-ref"
command packObjects "pack-objects"
    usage
        "usage: git pack-objects --stdout [<options>...] [< <ref-list> | < <object-list>]"
        "   or: git pack-objects [<options>...] <base-name> [< <ref-list> | < <object-list>]"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "do not show progress meter"
    option progress
        longname: progress
        type: bool
        help: "show progress meter"
    option allProgress
        longname: all-progress
        type: bool
        help: "show progress meter during object writing phase"
    option allProgressImplied
        longname: all-progress-implied
        type: bool
        help: "similar to --all-progress when progress meter is shown"
    option indexVersion
        longname: index-version
        argument: <version>[,<offset>]
        type: string
        help: "write the pack index file in the specified idx format version"
    option maxPackSize
        longname: max-pack-size
        argument: <n>
        type: int
        help: "maximum size of each output pack file"
    option local
        longname: local
        type: bool
        help: "ignore borrowed objects from alternate object store"
    option incremental
        longname: incremental
        type: bool
        help: "ignore packed objects"
    option window
        longname: window
        argument: <n>
        type: int
        help: "limit pack window by objects"
    option windowMemory
        longname: window-memory
        argument: <n>
        type: int
        help: "limit pack window by memory in addition to object limit"
    option depth
        longname: depth
        argument: <n>
        type: int
        help: "maximum length of delta chain allowed in the resulting pack"
    option reuseDelta
        longname: reuse-delta
        type: bool
        help: "reuse existing deltas"
    option reuseObject
        longname: reuse-object
        type: bool
        help: "reuse existing objects"
    option deltaBaseOffset
        longname: delta-base-offset
        type: bool
        help: "use OFS_DELTA objects"
    option threads
        longname: threads
        argument: <n>
        type: int
        help: "use threads when searching for best delta matches"
    option nonEmpty
        longname: non-empty
        type: bool
        help: "do not create an empty pack output"
    option revs
        longname: revs
        type: bool
        help: "read revision arguments from standard input"
    option unpacked
        longname: unpacked
        type: bool
        help: "limit the objects to those that are not yet packed"
    option all
        longname: all
        type: bool
        help: "include objects reachable from any reference"
    option reflog
        longname: reflog
        type: bool
        help: "include objects referred by reflog entries"
    option indexedObjects
        longname: indexed-objects
        type: bool
        help: "include objects referred to by the index"
    option stdout
        longname: stdout
        type: bool
        help: "output pack to stdout"
    option includeTag
        longname: include-tag
        type: bool
        help: "include tag objects that refer to objects to be packed"
    option keepUnreachable
        longname: keep-unreachable
        type: bool
        help: "keep unreachable objects"
    option packLooseUnreachable
        longname: pack-loose-unreachable
        type: bool
        help: "pack loose unreachable objects"
    option unpackUnreachable
        longname: unpack-unreachable
        argument: [=<time>]
        optional
        type: string
        help: "unpack unreachable objects newer than <time>"
    option thin
        longname: thin
        type: bool
        help: "create thin packs"
    option shallow
        longname: shallow
        type: bool
        help: "create packs suitable for shallow fetches"
    option honorPackKeep
        longname: honor-pack-keep
        type: bool
        help: "ignore packs that have companion .keep file"
    option keepPack
        longname: keep-pack
        argument: <name>
        type: string
        help: "ignore this pack"
    option compression
        longname: compression
        argument: <n>
        type: int
        help: "pack compression level"
    option keepTrueParents
        longname: keep-true-parents
        type: bool
        help: "do not hide commits by grafts"
    option useBitmapIndex
        longname: use-bitmap-index
        type: bool
        help: "use a bitmap index if available to speed up counting objects"
    option writeBitmapIndex
        longname: write-bitmap-index
        type: bool
        help: "write a bitmap index together with the pack index"
    option filter
        longname: filter
        argument: <args>
        type: string
        help: "object filtering"
    option missing
        longname: missing
        argument: <action>
        type: string
        help: "handling for missing objects"
    option excludePromisorObjects
        longname: exclude-promisor-objects
        type: bool
        help: "do not pack objects in promisor packfiles"
    option deltaIslands
        longname: delta-islands
        type: bool
        help: "respect islands during delta compression"
command packRedundant "pack-redundant"
    usage
        "usage: git pack-redundant [--verbose] [--alt-odb] (--all | <filename.pack>...)"
command packRefs "pack-refs"
    usage
        "usage: git pack-refs [<options>]"
    option all
        longname: all
        type: bool
        help: "pack everything"
    option prune
        longname: prune
        type: bool
        help: "prune loose refs (default)"
command patchId "patch-id"
    usage
        "usage: git patch-id [--stable | --unstable]"
command prune "prune"
    usage
        "usage: git prune [-n] [-v] [--progress] [--expire <time>] [--] [<head>...]"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "do not remove, show only"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "report pruned objects"
    option progress
        longname: progress
        type: bool
        help: "show progress"
    option expire
        longname: expire
        argument: <expiry-date>
        type: string
        help: "expire objects older than <time>"
    option excludePromisorObjects
        longname: exclude-promisor-objects
        type: bool
        help: "limit traversal to objects outside promisor packfiles"
command prunePacked "prune-packed"
    usage
        "usage: git prune-packed [-n | --dry-run] [-q | --quiet]"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be quiet"
command pull "pull"
    usage
        "usage: git pull [<options>] [<repository> [<refspec>...]]"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be more verbose"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be more quiet"
    option progress
        longname: progress
        type: bool
        help: "force progress reporting"
    option recurseSubmodules
        longname: recurse-submodules
        argument: [=<on-demand>]
        optional
        type: string
        help: "control for recursive fetching of submodules"
    option
        groupline
    option
        textline: Options related to merging
    option rebase
        shortname: r
        longname: rebase
        argument: [=(false|true|merges|preserve|interactive)]
        optional
        type: string
        help: "incorporate changes by rebasing rather than merging"
    option n
        shortname: n
        type: bool
        help: "do not show a diffstat at the end of the merge"
    option stat
        longname: stat
        type: bool
        help: "show a diffstat at the end of the merge"
    option summary
        longname: summary
        hidden
        type: bool
        help: "(synonym to --stat)"
    option log
        longname: log
        argument: [=<n>]
        optional
        type: int
        help: "add (at most <n>) entries from shortlog to merge commit message"
    option signoff
        longname: signoff
        argument: [=...]
        optional
        type: string
        help: "add Signed-off-by:"
    option squash
        longname: squash
        type: bool
        help: "create a single commit instead of doing a merge"
    option commit
        longname: commit
        type: bool
        help: "perform a commit if the merge succeeds (default)"
    option edit
        longname: edit
        type: bool
        help: "edit message before committing"
    option ff
        longname: ff
        type: bool
        help: "allow fast-forward"
    option ffOnly
        longname: ff-only
        type: bool
        help: "abort if fast-forward is not possible"
    option verifySignatures
        longname: verify-signatures
        type: bool
        help: "verify that the named commit has a valid GPG signature"
    option autostash
        longname: autostash
        type: bool
        help: "automatically stash/stash pop before and after rebase"
    option strategy
        shortname: s
        longname: strategy
        argument: <strategy>
        type: string
        help: "merge strategy to use"
    option strategyOption
        shortname: X
        longname: strategy-option
        argument: <option=value>
        type: string
        help: "option for selected merge strategy"
    option gpgSign
        shortname: S
        longname: gpg-sign
        argument: [=<key-id>]
        optional
        type: string
        help: "GPG sign commit"
    option allowUnrelatedHistories
        longname: allow-unrelated-histories
        type: bool
        help: "allow merging unrelated histories"
    option
        groupline
    option
        textline: Options related to fetching
    option all
        longname: all
        type: bool
        help: "fetch from all remotes"
    option append
        shortname: a
        longname: append
        type: bool
        help: "append to .git/FETCH_HEAD instead of overwriting"
    option uploadPack
        longname: upload-pack
        argument: <path>
        type: string
        help: "path to upload pack on remote end"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force overwrite of local branch"
    option tags
        shortname: t
        longname: tags
        type: bool
        help: "fetch all tags and associated objects"
    option prune
        shortname: p
        longname: prune
        type: bool
        help: "prune remote-tracking branches no longer on remote"
    option jobs
        shortname: j
        longname: jobs
        argument: [=<n>]
        optional
        type: int
        help: "number of submodules pulled in parallel"
    option dryRun
        longname: dry-run
        type: bool
        help: "dry run"
    option keep
        shortname: k
        longname: keep
        type: bool
        help: "keep downloaded pack"
    option depth
        longname: depth
        argument: <depth>
        type: string
        help: "deepen history of shallow clone"
    option unshallow
        longname: unshallow
        type: bool
        help: "convert to a complete repository"
    option updateShallow
        longname: update-shallow
        type: bool
        help: "accept refs that update .git/shallow"
    option refmap
        longname: refmap
        argument: <refmap>
        type: string
        help: "specify fetch refmap"
    option ipv4
        shortname: 4
        longname: ipv4
        type: bool
        help: "use IPv4 addresses only"
    option ipv6
        shortname: 6
        longname: ipv6
        type: bool
        help: "use IPv6 addresses only"
command push "push"
    usage
        "usage: git push [<options>] [<repository> [<refspec>...]]"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be more verbose"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be more quiet"
    option repo
        longname: repo
        argument: <repository>
        type: string
        help: "repository"
    option all
        longname: all
        type: bool
        help: "push all refs"
    option mirror
        longname: mirror
        type: bool
        help: "mirror all refs"
    option delete
        shortname: d
        longname: delete
        type: bool
        help: "delete refs"
    option tags
        longname: tags
        type: bool
        help: "push tags (can't be used with --all or --mirror)"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option porcelain
        longname: porcelain
        type: bool
        help: "machine-readable output"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force updates"
    option forceWithLease
        longname: force-with-lease
        argument: [=<refname>:<expect>]
        optional
        type: string
        help: "require old value of ref to be at this value"
    option recurseSubmodules
        longname: recurse-submodules
        argument: [=(check|on-demand|no)]
        optional
        type: string
        help: "control recursive pushing of submodules"
    option thin
        longname: thin
        type: bool
        help: "use thin pack"
    option receivePack
        longname: receive-pack
        argument: <receive-pack>
        type: string
        help: "receive pack program"
    option exec
        longname: exec
        argument: <receive-pack>
        type: string
        help: "receive pack program"
    option setUpstream
        shortname: u
        longname: set-upstream
        type: bool
        help: "set upstream for git pull/status"
    option progress
        longname: progress
        type: bool
        help: "force progress reporting"
    option prune
        longname: prune
        type: bool
        help: "prune locally removed refs"
    option noVerify
        longname: no-verify
        type: bool
        help: "bypass pre-push hook"
    option followTags
        longname: follow-tags
        type: bool
        help: "push missing but relevant tags"
    option signed
        longname: signed
        argument: [=(yes|no|if-asked)]
        optional
        type: string
        help: "GPG sign the push"
    option atomic
        longname: atomic
        type: bool
        help: "request atomic transaction on remote side"
    option pushOption
        shortname: o
        longname: push-option
        argument: <server-specific>
        type: string
        help: "option to transmit"
    option ipv4
        shortname: 4
        longname: ipv4
        type: bool
        help: "use IPv4 addresses only"
    option ipv6
        shortname: 6
        longname: ipv6
        type: bool
        help: "use IPv6 addresses only"
command quiltimport "quiltimport"
    usage
        "usage: git quiltimport [options]"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option author
        longname: author
        argument: ...
        type: string
        help: "author name and email address for patches without any"
    option patches
        longname: patches
        argument: ...
        type: string
        help: "path to the quilt patches"
    option series
        longname: series
        argument: ...
        type: string
        help: "path to the quilt series file"
command readTree "read-tree"
    usage
        "usage: git read-tree [(-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>) [-u [--exclude-per-directory=<gitignore>] | -i]] [--no-sparse-checkout] [--index-output=<file>] (--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])"
    option indexOutput
        longname: index-output
        argument: <file>
        type: string
        help: "write resulting index to <file>"
    option empty
        longname: empty
        type: bool
        help: "only empty the index"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option
        groupline
    option
        textline: Merging
    option m
        shortname: m
        type: bool
        help: "perform a merge in addition to a read"
    option trivial
        longname: trivial
        type: bool
        help: "3-way merge if no file level merging required"
    option aggressive
        longname: aggressive
        type: bool
        help: "3-way merge in presence of adds and removes"
    option reset
        longname: reset
        type: bool
        help: "same as -m, but discard unmerged entries"
    option prefix
        longname: prefix
        argument: <subdirectory>/
        type: string
        help: "read the tree into the index under <subdirectory>/"
    option u
        shortname: u
        type: bool
        help: "update working tree with merge result"
    option excludePerDirectory
        longname: exclude-per-directory
        argument: <gitignore>
        type: string
        help: "allow explicitly ignored files to be overwritten"
    option i
        shortname: i
        type: bool
        help: "don't check the working tree after merging"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "don't update the index or the work tree"
    option noSparseCheckout
        longname: no-sparse-checkout
        type: bool
        help: "skip applying sparse checkout filter"
    option debugUnpack
        longname: debug-unpack
        type: bool
        help: "debug unpack-trees"
    option recurseSubmodules
        longname: recurse-submodules
        argument: [=<checkout>]
        optional
        type: string
        help: "control recursive updating of submodules"
command rebase "rebase"
    usage
        "usage: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] [<upstream>] [<branch>]"
        "   or: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] --root [<branch>]"
        "   or: git rebase --continue | --abort | --skip | --edit-todo"
    option onto
        longname: onto
        argument: <revision>
        type: string
        help: "rebase onto given branch instead of upstream"
    option noVerify
        longname: no-verify
        type: bool
        help: "allow pre-rebase hook to run"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be quiet. implies --no-stat"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "display a diffstat of what changed upstream"
    option noStat
        shortname: n
        longname: no-stat
        type: bool
        help: "do not show diffstat of what changed upstream"
    option signoff
        longname: signoff
        type: bool
        help: "add a Signed-off-by: line to each commit"
    option ignoreWhitespace
        longname: ignore-whitespace
        type: bool
        help: "passed to 'git am'"
    option committerDateIsAuthorDate
        longname: committer-date-is-author-date
        type: bool
        help: "passed to 'git am'"
    option ignoreDate
        longname: ignore-date
        type: bool
        help: "passed to 'git am'"
    option c
        shortname: C
        argument: <n>
        type: int
        help: "passed to 'git apply'"
    option whitespace
        longname: whitespace
        argument: <action>
        type: string
        help: "passed to 'git apply'"
    option forceRebase
        shortname: f
        longname: force-rebase
        type: bool
        help: "cherry-pick all commits, even if unchanged"
    option noFf
        longname: no-ff
        type: bool
        help: "cherry-pick all commits, even if unchanged"
    option continue
        longname: continue
        type: bool
        help: "continue"
    option skip
        longname: skip
        type: bool
        help: "skip current patch and continue"
    option abort
        longname: abort
        type: bool
        help: "abort and check out the original branch"
    option quit
        longname: quit
        type: bool
        help: "abort but keep HEAD where it is"
    option editTodo
        longname: edit-todo
        type: bool
        help: "edit the todo list during an interactive rebase"
    option showCurrentPatch
        longname: show-current-patch
        type: bool
        help: "show the patch file being applied or merged"
    option merge
        shortname: m
        longname: merge
        type: bool
        help: "use merging strategies to rebase"
    option interactive
        shortname: i
        longname: interactive
        type: bool
        help: "let the user edit the list of commits to rebase"
    option preserveMerges
        shortname: p
        longname: preserve-merges
        type: bool
        help: "try to recreate merges instead of ignoring them"
    option rerereAutoupdate
        longname: rerere-autoupdate
        type: bool
        help: "allow rerere to update index with resolved conflict"
    option keepEmpty
        shortname: k
        longname: keep-empty
        type: bool
        help: "preserve empty commits during rebase"
    option autosquash
        longname: autosquash
        type: bool
        help: "move commits that begin with squash!/fixup! under -i"
    option gpgSign
        shortname: S
        longname: gpg-sign
        argument: [=<key-id>]
        optional
        type: string
        help: "GPG-sign commits"
    option autostash
        longname: autostash
        type: bool
        help: "automatically stash/stash pop before and after"
    option exec
        shortname: x
        longname: exec
        argument: <exec>
        type: string
        help: "add exec lines after each commit of the editable list"
    option allowEmptyMessage
        longname: allow-empty-message
        type: bool
        help: "allow rebasing commits with empty messages"
    option rebaseMerges
        shortname: r
        longname: rebase-merges
        argument: [=<mode>]
        optional
        type: string
        help: "try to rebase merges instead of skipping them"
    option forkPoint
        longname: fork-point
        type: bool
        help: "use 'merge-base --fork-point' to refine upstream"
    option strategy
        shortname: s
        longname: strategy
        argument: <strategy>
        type: string
        help: "use the given merge strategy"
    option strategyOption
        shortname: X
        longname: strategy-option
        argument: <option>
        type: string
        help: "pass the argument through to the merge strategy"
    option root
        longname: root
        type: bool
        help: "rebase all reachable commits up to the root(s)"
command receivePack "receive-pack"
    usage
        "usage: git receive-pack <git-dir>"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "quiet"
command reflog "reflog"
    usage
        "usage: git reflog [ show | expire | delete | exists ]"
command reflogShow "reflog show"
    usage
        "usage: git log [<options>] [<revision-range>] [[--] <path>...]"
        "   or: git show [<options>] <object>..."
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress diff output"
    option source
        longname: source
        type: bool
        help: "show source"
    option useMailmap
        longname: use-mailmap
        type: bool
        help: "Use mail map file"
    option decorateRefs
        longname: decorate-refs
        argument: <pattern>
        type: string
        help: "only decorate refs that match <pattern>"
    option decorateRefsExclude
        longname: decorate-refs-exclude
        argument: <pattern>
        type: string
        help: "do not decorate refs that match <pattern>"
    option decorate
        longname: decorate
        argument: [=...]
        optional
        type: string
        help: "decorate options"
    option l
        shortname: L
        argument: <n,m:file>
        type: string
        help: "Process line range n,m in file, counting from 1"
command reflogExpire "reflog expire"
    usage
        "usage: git reflog expire [--expire=<time>] [--expire-unreachable=<time>] [--rewrite] [--updateref] [--stale-fix] [--dry-run | -n] [--verbose] [--all] <refs>..."
command reflogDelete "reflog delete"
    usage
        "usage: git reflog delete [--rewrite] [--updateref] [--dry-run | -n] [--verbose] <refs>..."
command reflogExists "reflog exists"
    usage
        "usage: git reflog exists <ref>"
command remote "remote"
    usage
        "usage: git remote [-v | --verbose]"
        "   or: git remote add [-t <branch>] [-m <master>] [-f] [--tags | --no-tags] [--mirror=<fetch|push>] <name> <url>"
        "   or: git remote rename <old> <new>"
        "   or: git remote remove <name>"
        "   or: git remote set-head <name> (-a | --auto | -d | --delete | <branch>)"
        "   or: git remote [-v | --verbose] show [-n] <name>"
        "   or: git remote prune [-n | --dry-run] <name>"
        "   or: git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)...]"
        "   or: git remote set-branches [--add] <name> <branch>..."
        "   or: git remote get-url [--push] [--all] <name>"
        "   or: git remote set-url [--push] <name> <newurl> [<oldurl>]"
        "   or: git remote set-url --add <name> <newurl>"
        "   or: git remote set-url --delete <name> <url>"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose; must be placed before a subcommand"
command remoteAdd "remote add"
    usage
        "usage: git remote add [<options>] <name> <url>"
    option fetch
        shortname: f
        longname: fetch
        type: bool
        help: "fetch the remote branches"
    option tags
        longname: tags
        type: bool
        help: "import all tags and associated objects when fetching"
    option
        textline:                           or do not fetch any tag at all (--no-tags)
    option track
        shortname: t
        longname: track
        argument: <branch>
        type: string
        help: "branch(es) to track"
    option master
        shortname: m
        longname: master
        argument: <branch>
        type: string
        help: "master branch"
    option mirror
        longname: mirror
        argument: [=(push|fetch)]
        optional
        type: string
        help: "set up remote as a mirror to push to or fetch from"
command remoteRename "remote rename"
    usage
        "usage: git remote rename <old> <new>"
command remoteSetHead "remote set-head"
    usage
        "usage: git remote set-head <name> (-a | --auto | -d | --delete | <branch>)"
    option auto
        shortname: a
        longname: auto
        type: bool
        help: "set refs/remotes/<name>/HEAD according to remote"
    option delete
        shortname: d
        longname: delete
        type: bool
        help: "delete refs/remotes/<name>/HEAD"
command remoteShow "remote show"
    usage
        "usage: git remote show [<options>] <name>"
    option n
        shortname: n
        type: bool
        help: "do not query remotes"
command remotePrune "remote prune"
    usage
        "usage: git remote prune [<options>] <name>"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
command remoteUpdate "remote update"
    usage
        "usage: git remote update [<options>] [<group> | <remote>]..."
    option prune
        shortname: p
        longname: prune
        type: bool
        help: "prune remotes after fetching"
command remoteSetBranches "remote set-branches"
    usage
        "usage: git remote set-branches <name> <branch>..."
        "   or: git remote set-branches --add <name> <branch>..."
    option add
        longname: add
        type: bool
        help: "add branch"
command remoteGetUrl "remote get-url"
    usage
        "usage: git remote get-url [--push] [--all] <name>"
    option push
        longname: push
        type: bool
        help: "query push URLs rather than fetch URLs"
    option all
        longname: all
        type: bool
        help: "return all URLs"
command remoteSetUrl "remote set-url"
    usage
        "usage: git remote set-url [--push] <name> <newurl> [<oldurl>]"
        "   or: git remote set-url --add <name> <newurl>"
        "   or: git remote set-url --delete <name> <url>"
    option push
        longname: push
        type: bool
        help: "manipulate push URLs"
    option add
        longname: add
        type: bool
        help: "add URL"
    option delete
        longname: delete
        type: bool
        help: "delete URLs"
command repack "repack"
    usage
        "usage: git repack [<options>]"
    option a
        shortname: a
        type: bool
        help: "pack everything in a single pack"
    option a
        shortname: A
        type: bool
        help: "same as -a, and turn unreachable objects loose"
    option d
        shortname: d
        type: bool
        help: "remove redundant packs, and run git-prune-packed"
    option f
        shortname: f
        type: bool
        help: "pass --no-reuse-delta to git-pack-objects"
    option f
        shortname: F
        type: bool
        help: "pass --no-reuse-object to git-pack-objects"
    option n
        shortname: n
        type: bool
        help: "do not run git-update-server-info"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be quiet"
    option local
        shortname: l
        longname: local
        type: bool
        help: "pass --local to git-pack-objects"
    option writeBitmapIndex
        shortname: b
        longname: write-bitmap-index
        type: bool
        help: "write bitmap index"
    option deltaIslands
        shortname: i
        longname: delta-islands
        type: bool
        help: "pass --delta-islands to git-pack-objects"
    option unpackUnreachable
        longname: unpack-unreachable
        argument: <approxidate>
        type: string
        help: "with -A, do not loosen objects older than this"
    option keepUnreachable
        shortname: k
        longname: keep-unreachable
        type: bool
        help: "with -a, repack unreachable objects"
    option window
        longname: window
        argument: <n>
        type: int
        help: "size of the window used for delta compression"
    option windowMemory
        longname: window-memory
        argument: <bytes>
        type: string
        help: "same as the above, but limit memory size instead of entries count"
    option depth
        longname: depth
        argument: <n>
        type: int
        help: "limits the maximum delta depth"
    option threads
        longname: threads
        argument: <n>
        type: int
        help: "limits the maximum number of threads"
    option maxPackSize
        longname: max-pack-size
        argument: <bytes>
        type: string
        help: "maximum size of each packfile"
    option packKeptObjects
        longname: pack-kept-objects
        type: bool
        help: "repack objects in packs marked with .keep"
    option keepPack
        longname: keep-pack
        argument: <name>
        type: string
        help: "do not repack this pack"
command replace "replace"
    usage
        "usage: git replace [-f] <object> <replacement>"
        "   or: git replace [-f] --edit <object>"
        "   or: git replace [-f] --graft <commit> [<parent>...]"
        "   or: git replace [-f] --convert-graft-file"
        "   or: git replace -d <object>..."
        "   or: git replace [--format=<format>] [-l [<pattern>]]"
    option list
        shortname: l
        longname: list
        type: bool
        help: "list replace refs"
    option delete
        shortname: d
        longname: delete
        type: bool
        help: "delete replace refs"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "edit existing object"
    option graft
        shortname: g
        longname: graft
        type: bool
        help: "change a commit's parents"
    option convertGraftFile
        longname: convert-graft-file
        type: bool
        help: "convert existing graft file"
    option force
        shortname: f
        longname: force
        type: bool
        help: "replace the ref if it exists"
    option raw
        longname: raw
        type: bool
        help: "do not pretty-print contents for --edit"
    option format
        longname: format
        argument: <format>
        type: string
        help: "use this format"
command requestPull "request-pull"
    usage
        "usage: git request-pull [options] start url [end]"
    option p
        shortname: p
        type: bool
        help: "show patch text as well"
command rerere "rerere"
    usage
        "usage: git rerere [clear | forget <path>... | status | remaining | diff | gc]"
    option rerereAutoupdate
        longname: rerere-autoupdate
        type: bool
        help: "register clean resolutions in index"
command reset "reset"
    usage
        "usage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]"
        "   or: git reset [-q] [<tree-ish>] [--] <paths>..."
        "   or: EXPERIMENTAL: git reset [-q] [--stdin [-z]] [<tree-ish>]"
        "   or: git reset --patch [<tree-ish>] [--] [<paths>...]"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be quiet, only report errors"
    option mixed
        longname: mixed
        type: bool
        help: "reset HEAD and index"
    option soft
        longname: soft
        type: bool
        help: "reset only HEAD"
    option hard
        longname: hard
        type: bool
        help: "reset HEAD, index and working tree"
    option merge
        longname: merge
        type: bool
        help: "reset HEAD, index and working tree"
    option keep
        longname: keep
        type: bool
        help: "reset HEAD but keep local changes"
    option recurseSubmodules
        longname: recurse-submodules
        argument: [=<reset>]
        optional
        type: string
        help: "control recursive updating of submodules"
    option patch
        shortname: p
        longname: patch
        type: bool
        help: "select hunks interactively"
    option intentToAdd
        shortname: N
        longname: intent-to-add
        type: bool
        help: "record only the fact that removed paths will be added later"
    option z
        shortname: z
        type: bool
        help: "EXPERIMENTAL: paths are separated with NUL character"
    option stdin
        longname: stdin
        type: bool
        help: "EXPERIMENTAL: read paths from <stdin>"
command revert "revert"
    usage
        "usage: git revert [<options>] <commit-ish>..."
        "   or: git revert <subcommand>"
    option quit
        longname: quit
        type: bool
        help: "end revert or cherry-pick sequence"
    option continue
        longname: continue
        type: bool
        help: "resume revert or cherry-pick sequence"
    option abort
        longname: abort
        type: bool
        help: "cancel revert or cherry-pick sequence"
    option noCommit
        shortname: n
        longname: no-commit
        type: bool
        help: "don't automatically commit"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "edit the commit message"
    option r
        shortname: r
        hidden
        type: bool
        help: "no-op (backward compatibility)"
    option signoff
        shortname: s
        longname: signoff
        type: bool
        help: "add Signed-off-by:"
    option mainline
        shortname: m
        longname: mainline
        argument: <parent-number>
        type: string
        help: "select mainline parent"
    option rerereAutoupdate
        longname: rerere-autoupdate
        type: bool
        help: "update the index with reused conflict resolution if possible"
    option strategy
        longname: strategy
        argument: <strategy>
        type: string
        help: "merge strategy"
    option strategyOption
        shortname: X
        longname: strategy-option
        argument: <option>
        type: string
        help: "option for merge strategy"
    option gpgSign
        shortname: S
        longname: gpg-sign
        argument: [=<key-id>]
        optional
        type: string
        help: "GPG sign commit"
command revParse "rev-parse"
    usage
        "usage: git rev-parse --parseopt [<options>] -- [<args>...]"
        "   or: git rev-parse --sq-quote [<arg>...]"
        "   or: git rev-parse [<options>] [<arg>...]"
        ""
        "Run "git rev-parse --parseopt -h" for more information on the first usage."
command rm "rm"
    usage
        "usage: git rm [<options>] [--] <file>..."
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "do not list removed files"
    option cached
        longname: cached
        type: bool
        help: "only remove from the index"
    option force
        shortname: f
        longname: force
        type: bool
        help: "override the up-to-date check"
    option r
        shortname: r
        type: bool
        help: "allow recursive removal"
    option ignoreUnmatch
        longname: ignore-unmatch
        type: bool
        help: "exit with a zero status even if nothing matched"
command sendPack "send-pack"
    usage
        "usage: git send-pack [--all | --mirror] [--dry-run] [--force] [--receive-pack=<git-receive-pack>] [--verbose] [--thin] [--atomic] [<host>:]<directory> [<ref>...]"
        "  --all and explicit <ref> specification are mutually exclusive."
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be more verbose"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "be more quiet"
    option receivePack
        longname: receive-pack
        argument: <receive-pack>
        type: string
        help: "receive pack program"
    option exec
        longname: exec
        argument: <receive-pack>
        type: string
        help: "receive pack program"
    option remote
        longname: remote
        argument: <remote>
        type: string
        help: "remote name"
    option all
        longname: all
        type: bool
        help: "push all refs"
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option mirror
        longname: mirror
        type: bool
        help: "mirror all refs"
    option force
        shortname: f
        longname: force
        type: bool
        help: "force updates"
    option signed
        longname: signed
        argument: [=(yes|no|if-asked)]
        optional
        type: string
        help: "GPG sign the push"
    option pushOption
        longname: push-option
        argument: <server-specific>
        type: string
        help: "option to transmit"
    option progress
        longname: progress
        type: bool
        help: "force progress reporting"
    option thin
        longname: thin
        type: bool
        help: "use thin pack"
    option atomic
        longname: atomic
        type: bool
        help: "request atomic transaction on remote side"
    option statelessRpc
        longname: stateless-rpc
        type: bool
        help: "use stateless RPC protocol"
    option stdin
        longname: stdin
        type: bool
        help: "read refs from stdin"
    option helperStatus
        longname: helper-status
        type: bool
        help: "print status from remote helper"
    option forceWithLease
        longname: force-with-lease
        argument: [=<refname>:<expect>]
        optional
        type: string
        help: "require old value of ref to be at this value"
command shortlog "shortlog"
    usage
        "usage: git shortlog [<options>] [<revision-range>] [[--] <path>...]"
        "   or: git log --pretty=short | git shortlog [<options>]"
    option committer
        shortname: c
        longname: committer
        type: bool
        help: "Group by committer rather than author"
    option numbered
        shortname: n
        longname: numbered
        type: bool
        help: "sort output according to the number of commits per author"
    option summary
        shortname: s
        longname: summary
        type: bool
        help: "Suppress commit descriptions, only provides commit count"
    option email
        shortname: e
        longname: email
        type: bool
        help: "Show the email address of each author"
    option w
        shortname: w
        argument: [<w>[,<i1>[,<i2>]]]
        optional
        type: string
        help: "Linewrap output"
command show "show"
    usage
        "usage: git log [<options>] [<revision-range>] [[--] <path>...]"
        "   or: git show [<options>] <object>..."
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress diff output"
    option source
        longname: source
        type: bool
        help: "show source"
    option useMailmap
        longname: use-mailmap
        type: bool
        help: "Use mail map file"
    option decorateRefs
        longname: decorate-refs
        argument: <pattern>
        type: string
        help: "only decorate refs that match <pattern>"
    option decorateRefsExclude
        longname: decorate-refs-exclude
        argument: <pattern>
        type: string
        help: "do not decorate refs that match <pattern>"
    option decorate
        longname: decorate
        argument: [=...]
        optional
        type: string
        help: "decorate options"
    option l
        shortname: L
        argument: <n,m:file>
        type: string
        help: "Process line range n,m in file, counting from 1"
command showBranch "show-branch"
    usage
        "usage: git show-branch [-a | --all] [-r | --remotes] [--topo-order | --date-order]"
        "		[--current] [--color[=<when>] | --no-color] [--sparse]"
        "		[--more=<n> | --list | --independent | --merge-base]"
        "		[--no-name | --sha1-name] [--topics] [(<rev> | <glob>)...]"
        "   or: git show-branch (-g | --reflog)[=<n>[,<base>]] [--list] [<ref>]"
    option all
        shortname: a
        longname: all
        type: bool
        help: "show remote-tracking and local branches"
    option remotes
        shortname: r
        longname: remotes
        type: bool
        help: "show remote-tracking branches"
    option color
        longname: color
        argument: [=<when>]
        optional
        type: string
        help: "color '*!+-' corresponding to the branch"
    option more
        longname: more
        argument: [=<n>]
        optional
        type: int
        help: "show <n> more commits after the common ancestor"
    option list
        longname: list
        type: bool
        help: "synonym to more=-1"
    option noName
        longname: no-name
        type: bool
        help: "suppress naming strings"
    option current
        longname: current
        type: bool
        help: "include the current branch"
    option sha1Name
        longname: sha1-name
        type: bool
        help: "name commits with their object names"
    option mergeBase
        longname: merge-base
        type: bool
        help: "show possible merge bases"
    option independent
        longname: independent
        type: bool
        help: "show refs unreachable from any other ref"
    option topoOrder
        longname: topo-order
        type: bool
        help: "show commits in topological order"
    option topics
        longname: topics
        type: bool
        help: "show only commits not on the first branch"
    option sparse
        longname: sparse
        type: bool
        help: "show merges reachable from only one tip"
    option dateOrder
        longname: date-order
        type: bool
        help: "topologically sort, maintaining date order where possible"
    option reflog
        shortname: g
        longname: reflog
        argument: [=<n>[,<base>]]
        optional
        type: int
        help: "show <n> most recent ref-log entries starting at base"
command showIndex "show-index"
    usage
        "usage: git show-index"
command showRef "show-ref"
    usage
        "usage: git show-ref [-q | --quiet] [--verify] [--head] [-d | --dereference] [-s | --hash[=<n>]] [--abbrev[=<n>]] [--tags] [--heads] [--] [<pattern>...]"
        "   or: git show-ref --exclude-existing[=<pattern>]"
    option tags
        longname: tags
        type: bool
        help: "only show tags (can be combined with heads)"
    option heads
        longname: heads
        type: bool
        help: "only show heads (can be combined with tags)"
    option verify
        longname: verify
        type: bool
        help: "stricter reference checking, requires exact ref path"
    option h
        shortname: h
        hidden
        type: bool
        help: "show the HEAD reference, even if it would be filtered out"
    option head
        longname: head
        type: bool
        help: "show the HEAD reference, even if it would be filtered out"
    option dereference
        shortname: d
        longname: dereference
        type: bool
        help: "dereference tags into object IDs"
    option hash
        shortname: s
        longname: hash
        argument: [=<n>]
        optional
        type: int
        help: "only show SHA1 hash using <n> digits"
    option abbrev
        longname: abbrev
        argument: [=<n>]
        optional
        type: int
        help: "use <n> digits to display SHA-1s"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "do not print results to stdout (useful with --verify)"
    option excludeExisting
        longname: exclude-existing
        argument: [=<pattern>]
        optional
        type: string
        help: "show refs from stdin that aren't in local repository"
command stash "stash"
    usage
        "usage: git stash list [<options>]"
        "   or: git stash show [<options>] [<stash>]"
        "   or: git stash drop [-q|--quiet] [<stash>]"
        "   or: git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]"
        "   or: git stash branch <branchname> [<stash>]"
        "   or: git stash clear"
        "   or: git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]"
        "          [-u|--include-untracked] [-a|--all] [-m|--message <message>]"
        "          [--] [<pathspec>...]]"
        "   or: git stash save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]"
        "          [-u|--include-untracked] [-a|--all] [<message>]"
command stage "stage"
    usage
        "usage: git add [<options>] [--] <pathspec>..."
    option dryRun
        shortname: n
        longname: dry-run
        type: bool
        help: "dry run"
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option
        groupline
    option interactive
        shortname: i
        longname: interactive
        type: bool
        help: "interactive picking"
    option patch
        shortname: p
        longname: patch
        type: bool
        help: "select hunks interactively"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "edit current diff and apply"
    option force
        shortname: f
        longname: force
        type: bool
        help: "allow adding otherwise ignored files"
    option update
        shortname: u
        longname: update
        type: bool
        help: "update tracked files"
    option renormalize
        longname: renormalize
        type: bool
        help: "renormalize EOL of tracked files (implies -u)"
    option intentToAdd
        shortname: N
        longname: intent-to-add
        type: bool
        help: "record only the fact that the path will be added later"
    option all
        shortname: A
        longname: all
        type: bool
        help: "add changes from all tracked and untracked files"
    option ignoreRemoval
        longname: ignore-removal
        type: bool
        help: "ignore paths removed in the working tree (same as --no-all)"
    option refresh
        longname: refresh
        type: bool
        help: "don't add, only refresh the index"
    option ignoreErrors
        longname: ignore-errors
        type: bool
        help: "just skip files which cannot be added because of errors"
    option ignoreMissing
        longname: ignore-missing
        type: bool
        help: "check if - even missing - files are ignored in dry run"
    option chmod
        longname: chmod
        argument: (+|-)x
        type: string
        help: "override the executable bit of the listed files"
    option warnEmbeddedRepo
        longname: warn-embedded-repo
        hidden
        type: bool
        help: "warn when adding an embedded repository"
command status "status"
    usage
        "usage: git status [<options>] [--] <pathspec>..."
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "be verbose"
    option short
        shortname: s
        longname: short
        type: bool
        help: "show status concisely"
    option branch
        shortname: b
        longname: branch
        type: bool
        help: "show branch information"
    option showStash
        longname: show-stash
        type: bool
        help: "show stash information"
    option aheadBehind
        longname: ahead-behind
        type: bool
        help: "compute full ahead/behind values"
    option porcelain
        longname: porcelain
        argument: [=<version>]
        optional
        type: string
        help: "machine-readable output"
    option long
        longname: long
        type: bool
        help: "show status in long format (default)"
    option null
        shortname: z
        longname: null
        type: bool
        help: "terminate entries with NUL"
    option untrackedFiles
        shortname: u
        longname: untracked-files
        argument: [=<mode>]
        optional
        type: string
        help: "show untracked files, optional modes: all, normal, no. (Default: all)"
    option ignored
        longname: ignored
        argument: [=<mode>]
        optional
        type: string
        help: "show ignored files, optional modes: traditional, matching, no. (Default: traditional)"
    option ignoreSubmodules
        longname: ignore-submodules
        argument: [=<when>]
        optional
        type: string
        help: "ignore changes to submodules, optional when: all, dirty, untracked. (Default: all)"
    option column
        longname: column
        argument: [=<style>]
        optional
        type: string
        help: "list untracked files in columns"
    option noRenames
        longname: no-renames
        type: bool
        help: "do not detect renames"
    option findRenames
        shortname: M
        longname: find-renames
        argument: [=<n>]
        optional
        type: int
        help: "detect renames, optionally set similarity index"
    option showIgnoredDirectory
        longname: show-ignored-directory
        type: bool
        help: "(DEPRECATED: use --ignore=matching instead) Only show directories that match an ignore pattern name."
    option noLockIndex
        longname: no-lock-index
        type: bool
        help: "(DEPRECATED: use `git --no-optional-locks status` instead) Do not lock the index"
command stripspace "stripspace"
    usage
        "usage: git stripspace [-s | --strip-comments]"
        "   or: git stripspace [-c | --comment-lines]"
    option stripComments
        shortname: s
        longname: strip-comments
        type: bool
        help: "skip and remove all lines starting with comment character"
    option commentLines
        shortname: c
        longname: comment-lines
        type: bool
        help: "prepend comment character and space to each line"
command submodule "submodule"
    usage
        "usage: git submodule [--quiet] add [-b <branch>] [-f|--force] [--name <name>] [--reference <repository>] [--] <repository> [<path>]"
        "   or: git submodule [--quiet] status [--cached] [--recursive] [--] [<path>...]"
        "   or: git submodule [--quiet] init [--] [<path>...]"
        "   or: git submodule [--quiet] deinit [-f|--force] (--all| [--] <path>...)"
        "   or: git submodule [--quiet] update [--init] [--remote] [-N|--no-fetch] [-f|--force] [--checkout|--merge|--rebase] [--[no-]recommend-shallow] [--reference <repository>] [--recursive] [--] [<path>...]"
        "   or: git submodule [--quiet] summary [--cached|--files] [--summary-limit <n>] [commit] [--] [<path>...]"
        "   or: git submodule [--quiet] foreach [--recursive] <command>"
        "   or: git submodule [--quiet] sync [--recursive] [--] [<path>...]"
        "   or: git submodule [--quiet] absorbgitdirs [--] [<path>...]"
command symbolicRef "symbolic-ref"
    usage
        "usage: git symbolic-ref [<options>] <name> [<ref>]"
        "   or: git symbolic-ref -d [-q] <name>"
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress error message for non-symbolic (detached) refs"
    option delete
        shortname: d
        longname: delete
        type: bool
        help: "delete symbolic ref"
    option short
        longname: short
        type: bool
        help: "shorten ref output"
    option m
        shortname: m
        argument: <reason>
        type: string
        help: "reason of the update"
command tag "tag"
    usage
        "usage: git tag [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>] <tagname> [<head>]"
        "   or: git tag -d <tagname>..."
        "   or: git tag -l [-n[<num>]] [--contains <commit>] [--no-contains <commit>] [--points-at <object>]"
        "		[--format=<format>] [--[no-]merged [<commit>]] [<pattern>...]"
        "   or: git tag -v [--format=<format>] <tagname>..."
    option list
        shortname: l
        longname: list
        type: bool
        help: "list tag names"
    option n
        shortname: n
        argument: [<n>]
        optional
        type: int
        help: "print <n> lines of each tag message"
    option delete
        shortname: d
        longname: delete
        type: bool
        help: "delete tags"
    option verify
        shortname: v
        longname: verify
        type: bool
        help: "verify tags"
    option
        groupline
    option
        textline: Tag creation options
    option annotate
        shortname: a
        longname: annotate
        type: bool
        help: "annotated tag, needs a message"
    option message
        shortname: m
        longname: message
        argument: <message>
        type: string
        help: "tag message"
    option file
        shortname: F
        longname: file
        argument: <file>
        type: string
        help: "read message from file"
    option edit
        shortname: e
        longname: edit
        type: bool
        help: "force edit of tag message"
    option sign
        shortname: s
        longname: sign
        type: bool
        help: "annotated and GPG-signed tag"
    option cleanup
        longname: cleanup
        argument: <mode>
        type: string
        help: "how to strip spaces and #comments from message"
    option localUser
        shortname: u
        longname: local-user
        argument: <key-id>
        type: string
        help: "use another key to sign the tag"
    option force
        shortname: f
        longname: force
        type: bool
        help: "replace the tag if exists"
    option createReflog
        longname: create-reflog
        type: bool
        help: "create a reflog"
    option
        groupline
    option
        textline: Tag listing options
    option column
        longname: column
        argument: [=<style>]
        optional
        type: string
        help: "show tag list in columns"
    option contains
        longname: contains
        argument: <commit>
        type: string
        help: "print only tags that contain the commit"
    option noContains
        longname: no-contains
        argument: <commit>
        type: string
        help: "print only tags that don't contain the commit"
    option with
        longname: with
        hidden
        argument: <commit>
        type: string
        help: "print only tags that contain the commit"
    option without
        longname: without
        hidden
        argument: <commit>
        type: string
        help: "print only tags that don't contain the commit"
    option merged
        longname: merged
        argument: <commit>
        type: string
        help: "print only tags that are merged"
    option noMerged
        longname: no-merged
        argument: <commit>
        type: string
        help: "print only tags that are not merged"
    option sort
        longname: sort
        argument: <key>
        type: string
        help: "field name to sort on"
    option pointsAt
        longname: points-at
        argument: <object>
        type: string
        help: "print only tags of the object"
    option format
        longname: format
        argument: <format>
        type: string
        help: "format to use for the output"
    option color
        longname: color
        argument: [=<when>]
        optional
        type: string
        help: "respect format colors"
    option ignoreCase
        shortname: i
        longname: ignore-case
        type: bool
        help: "sorting and filtering are case insensitive"
command unpackFile "unpack-file"
    usage
        "usage: git unpack-file <sha1>"
command unpackObjects "unpack-objects"
    usage
        "usage: git unpack-objects [-n] [-q] [-r] [--strict]"
command updateIndex "update-index"
    usage
        "usage: git update-index [<options>] [--] [<file>...]"
    option q
        shortname: q
        type: bool
        help: "continue refresh even when index needs update"
    option ignoreSubmodules
        longname: ignore-submodules
        type: bool
        help: "refresh: ignore submodules"
    option add
        longname: add
        type: bool
        help: "do not ignore new files"
    option replace
        longname: replace
        type: bool
        help: "let files replace directories and vice-versa"
    option remove
        longname: remove
        type: bool
        help: "notice files missing from worktree"
    option unmerged
        longname: unmerged
        type: bool
        help: "refresh even if index contains unmerged entries"
    option refresh
        longname: refresh
        type: bool
        help: "refresh stat information"
    option reallyRefresh
        longname: really-refresh
        type: bool
        help: "like --refresh, but ignore assume-unchanged setting"
    option cacheinfo
        longname: cacheinfo
        argument: <mode>,<object>,<path>
        type: string
        help: "add the specified entry to the index"
    option chmod
        longname: chmod
        argument: (+|-)x
        type: string
        help: "override the executable bit of the listed files"
    option assumeUnchanged
        longname: assume-unchanged
        type: bool
        help: "mark files as "not changing""
    option noAssumeUnchanged
        longname: no-assume-unchanged
        type: bool
        help: "clear assumed-unchanged bit"
    option skipWorktree
        longname: skip-worktree
        type: bool
        help: "mark files as "index-only""
    option noSkipWorktree
        longname: no-skip-worktree
        type: bool
        help: "clear skip-worktree bit"
    option infoOnly
        longname: info-only
        type: bool
        help: "add to index only; do not add content to object database"
    option forceRemove
        longname: force-remove
        type: bool
        help: "remove named paths even if present in worktree"
    option z
        shortname: z
        type: bool
        help: "with --stdin: input lines are terminated by null bytes"
    option stdin
        longname: stdin
        type: bool
        help: "read list of paths to be updated from standard input"
    option indexInfo
        longname: index-info
        type: bool
        help: "add entries from standard input to the index"
    option unresolve
        longname: unresolve
        type: bool
        help: "repopulate stages #2 and #3 for the listed paths"
    option again
        shortname: g
        longname: again
        type: bool
        help: "only update entries that differ from HEAD"
    option ignoreMissing
        longname: ignore-missing
        type: bool
        help: "ignore files missing from worktree"
    option verbose
        longname: verbose
        type: bool
        help: "report actions to standard output"
    option clearResolveUndo
        longname: clear-resolve-undo
        type: bool
        help: "(for porcelains) forget saved unresolved conflicts"
    option indexVersion
        longname: index-version
        argument: <n>
        type: int
        help: "write index in this format"
    option splitIndex
        longname: split-index
        type: bool
        help: "enable or disable split index"
    option untrackedCache
        longname: untracked-cache
        type: bool
        help: "enable/disable untracked cache"
    option testUntrackedCache
        longname: test-untracked-cache
        type: bool
        help: "test if the filesystem supports untracked cache"
    option forceUntrackedCache
        longname: force-untracked-cache
        type: bool
        help: "enable untracked cache without testing the filesystem"
    option forceWriteIndex
        longname: force-write-index
        type: bool
        help: "write out the index even if is not flagged as changed"
    option fsmonitor
        longname: fsmonitor
        type: bool
        help: "enable or disable file system monitor"
    option fsmonitorValid
        longname: fsmonitor-valid
        type: bool
        help: "mark files as fsmonitor valid"
    option noFsmonitorValid
        longname: no-fsmonitor-valid
        type: bool
        help: "clear fsmonitor valid bit"
command updateRef "update-ref"
    usage
        "usage: git update-ref [<options>] -d <refname> [<old-val>]"
        "   or: git update-ref [<options>]    <refname> <new-val> [<old-val>]"
        "   or: git update-ref [<options>] --stdin [-z]"
    option m
        shortname: m
        argument: <reason>
        type: string
        help: "reason of the update"
    option d
        shortname: d
        type: bool
        help: "delete the reference"
    option noDeref
        longname: no-deref
        type: bool
        help: "update <refname> not the one it points to"
    option z
        shortname: z
        type: bool
        help: "stdin has NUL-terminated arguments"
    option stdin
        longname: stdin
        type: bool
        help: "read updates from stdin"
    option createReflog
        longname: create-reflog
        type: bool
        help: "create a reflog"
command updateServerInfo "update-server-info"
    usage
        "usage: git update-server-info [--force]"
    option force
        shortname: f
        longname: force
        type: bool
        help: "update the info files from scratch"
command uploadArchive "upload-archive"
    usage
        "usage: git upload-archive <repo>"
command uploadPack "upload-pack"
    usage
        "usage: git upload-pack [<options>] <dir>"
    option statelessRpc
        longname: stateless-rpc
        type: bool
        help: "quit after a single request/response exchange"
    option advertiseRefs
        longname: advertise-refs
        type: bool
        help: "exit immediately after initial ref advertisement"
    option strict
        longname: strict
        type: bool
        help: "do not try <directory>/.git/ if <directory> is no Git directory"
    option timeout
        longname: timeout
        argument: <n>
        type: int
        help: "interrupt transfer after <n> seconds of inactivity"
command var "var"
    usage
        "usage: git var (-l | <variable>)"
command verifyCommit "verify-commit"
    usage
        "usage: git verify-commit [-v | --verbose] <commit>..."
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "print commit contents"
    option raw
        longname: raw
        type: bool
        help: "print raw gpg status output"
command verifyPack "verify-pack"
    usage
        "usage: git verify-pack [-v | --verbose] [-s | --stat-only] <pack>..."
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "verbose"
    option statOnly
        shortname: s
        longname: stat-only
        type: bool
        help: "show statistics only"
command verifyTag "verify-tag"
    usage
        "usage: git verify-tag [-v | --verbose] [--format=<format>] <tag>..."
    option verbose
        shortname: v
        longname: verbose
        type: bool
        help: "print tag contents"
    option raw
        longname: raw
        type: bool
        help: "print raw gpg status output"
    option format
        longname: format
        argument: <format>
        type: string
        help: "format to use for the output"
command whatchanged "whatchanged"
    usage
        "usage: git log [<options>] [<revision-range>] [[--] <path>...]"
        "   or: git show [<options>] <object>..."
    option quiet
        shortname: q
        longname: quiet
        type: bool
        help: "suppress diff output"
    option source
        longname: source
        type: bool
        help: "show source"
    option useMailmap
        longname: use-mailmap
        type: bool
        help: "Use mail map file"
    option decorateRefs
        longname: decorate-refs
        argument: <pattern>
        type: string
        help: "only decorate refs that match <pattern>"
    option decorateRefsExclude
        longname: decorate-refs-exclude
        argument: <pattern>
        type: string
        help: "do not decorate refs that match <pattern>"
    option decorate
        longname: decorate
        argument: [=...]
        optional
        type: string
        help: "decorate options"
    option l
        shortname: L
        argument: <n,m:file>
        type: string
        help: "Process line range n,m in file, counting from 1"
command worktree "worktree"
    usage
        "usage: git worktree add [<options>] <path> [<commit-ish>]"
        "   or: git worktree list [<options>]"
        "   or: git worktree lock [<options>] <path>"
        "   or: git worktree move <worktree> <new-path>"
        "   or: git worktree prune [<options>]"
        "   or: git worktree remove [<options>] <worktree>"
        "   or: git worktree unlock <path>"
command writeTree "write-tree"
    usage
        "usage: git write-tree [--missing-ok] [--prefix=<prefix>/]"
    option missingOk
        longname: missing-ok
        type: bool
        help: "allow missing objects"
    option prefix
        longname: prefix
        argument: <prefix>/
        type: string
        help: "write tree object for a subdirectory <prefix>"
    option ignoreCacheTree
        longname: ignore-cache-tree
        hidden
        type: bool
        help: "only useful for debugging"
